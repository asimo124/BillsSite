		                        ////////////////
		                        // CertificateAI
		                        if let ai_certificates = base_json["ai_certificates"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                CertificateAi.truncate()
		                            }
		                            for (var i = 0; i < ai_certificates.count ; i += 1 ) {
                                
		                                if let get_ai_certificate = ai_certificates[i] as? NSDictionary {
                                    
		                                    let certificate_number = get_ai_certificate["certificate_number"] as? String
		                                    let stud_number = get_ai_certificate["stud_number"] as? String
		                                    let sire_owner = get_ai_certificate["sire_owner"] as? String
		                                    let sire_registration = get_ai_certificate["sire_registration"] as? String
		                                    let date_collected2 = get_ai_certificate["date_collected"] as? String
		                                    let date_collected = Utils.convertToDateOpt(date_collected2)
		                                    let semen_id = get_ai_certificate["semen_id"] as? String
		                                    let date_sold2 = get_ai_certificate["date_sold"] as? String
		                                    let date_sold = Utils.convertToDateOpt(date_sold2)
		                                    let dam_owner = get_ai_certificate["dam_owner"] as? String
		                                    let dam_registration = get_ai_certificate["dam_registration"] as? String
		                                    let date_inseminated2 = get_ai_certificate["date_inseminated"] as? String
		                                    let date_inseminated = Utils.convertToDateOpt(date_inseminated2)
		                                    let is_completed = get_ai_certificate["is_completed"] as? Int
		                                    let unit_qty = get_ai_certificate["unit_qty"] as? Int
		                                    let is_void = get_ai_certificate["is_void"] as? Int
                                    
                                    
		                                    if DBUtils.isNewDB() {
		                                        let MyCertificateAi = CertificateAiData()
		                                        MyCertificateAi.setCertificateNumber(certificate_number)
		                                        MyCertificateAi.setStudNumber(stud_number)
		                                        MyCertificateAi.setSireOwner(sire_owner)
		                                        MyCertificateAi.setSireRegistration(sire_registration)
		                                        MyCertificateAi.setDateCollected(date_collected)
		                                        MyCertificateAi.setSemenId(semen_id)
		                                        MyCertificateAi.setDateSold(date_sold)
		                                        MyCertificateAi.setDamOwner(dam_owner)
		                                        MyCertificateAi.setDamRegistration(dam_registration)
		                                        MyCertificateAi.setDateInseminated(date_inseminated)
		                                        MyCertificateAi.setIsCompleted(is_completed)
		                                        MyCertificateAi.setUnitQty(unit_qty)
		                                        MyCertificateAi.setIsVoid(is_void)
		                                        MyCertificateAi.addNew()
                                        
                                        
		                                    }
                                    
		                                }
		                            }
                            
		                            let dbn = Database()
		                            if (self.db_ins_query.rangeOfString("select") != nil) {
		                                dbn.query(self.db_ins_query)
		                            }
                            
		                            dbn.showRecords("ai_certificates", withFields: ["certificate_number", "stud_number", "sire_owner"], withHeaders: ["certnum", "studnum", "sire_own"], withSizes: [9, 30, 30], withDataType: "CertificateAiData")
                            
                            
		                        }
                        
		                        ///////////////////////////////
		                        // Association Codes Status
		                        if let codes_status = base_json["codes_status"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                AssociationCodesStatus.truncate()
		                            }
		                            for (var i = 0; i < codes_status.count ; i += 1 ) {
                                
		                                if let get_status = codes_status[i] as? NSDictionary {
                                    
		                                    let _id = get_status["_id"] as? Int
		                                    let code = get_status["code"] as? String
		                                    let text = get_status["text"] as? String
		                                    let status = get_status["status"] as? String
                                    
		                                    if DBUtils.isNewDB() {
                                        
		                                        let MyAssociationCodesStatus = AssociationCodesStatusData()
                                        
		                                        MyAssociationCodesStatus.setId(_id)
		                                        MyAssociationCodesStatus.setCode(code)
		                                        MyAssociationCodesStatus.setText(text)
		                                        MyAssociationCodesStatus.setStatus(status)
		                                        MyAssociationCodesStatus.addNew()
                                        
		                                    } else { // db old
                                        
                                        
		                                    }
		                                }
		                            }
                            
		                            let dbn = Database()
		                            if (self.db_ins_query.rangeOfString("select") != nil) {
		                                dbn.query(self.db_ins_query)
		                            }
                            
		                            dbn.showRecords("codes_status", withFields: ["_id", "code", "text"], withHeaders: ["id", "code", "text"], withSizes: [8, 8, 30], withDataType: "AssociationCodesStatusData")
                            
		                        }
                        
		                        ///////////////////////////////
		                        // Association Codes Scur Score
		                        if let codes_scur_score = base_json["codes_scur_score"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                AssociationCodesScurScore.truncate()
		                            }
                            
		                            /*let query = "insert into codes_scur_score (code, text) VALUES (?, ?) "
		                            let (sth, status) = SD.prepareQuery(query)*/
                            
		                            for (var i = 0; i < codes_scur_score.count ; i += 1 ) {
                                
		                                if let get_scur_score = codes_scur_score[i] as? NSDictionary {
                                    
		                                    let _id = get_scur_score["_id"] as? Int
		                                    let code = get_scur_score["code"] as? String
		                                    let text = get_scur_score["text"] as? String
                                    
		                                    if DBUtils.isNewDB() {
                                        
		                                        let MyAssociationCodesScurScore = AssociationCodesScurScoreData()
                                        
		                                        MyAssociationCodesScurScore.setId(_id)
		                                        MyAssociationCodesScurScore.setCode(code)
		                                        MyAssociationCodesScurScore.setText(text)
		                                        MyAssociationCodesScurScore.addNew()
                                        
		                                    } else { // db old
                                        
                                        
		                                    }
		                                }
		                            }
                            
		                            let dbn = Database()
		                            if (self.db_ins_query.rangeOfString("select") != nil) {
		                                dbn.query(self.db_ins_query)
		                            }
                            
		                            dbn.showRecords("codes_scur_score", withFields: ["_id", "code", "text"], withHeaders: ["id", "code", "text"], withSizes: [8, 8, 30], withDataType: "AssociationCodesScurScoreData")
                            
		                        }
                        
		                        ///////////////////////////////
		                        // Association Codes Color Score
		                        if let codes_color_score = base_json["codes_color_score"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                AssociationCodesColorScore.truncate()
		                            }
                            
		                            let dbn = Database()
		                            if codes_color_score.count > 0 {
                                
		                                for (var i = 0; i < codes_color_score.count ; i += 1 ) {
                                    
		                                    if let get_color_score = codes_color_score[i] as? NSDictionary {
                                        
		                                        let _id = get_color_score["_id"] as? Int
		                                        let code = get_color_score["code"] as? String
		                                        let text = get_color_score["text"] as? String
                                        
		                                        if DBUtils.isNewDB() {
                                            
		                                            let MyAssociationCodesColorScore = AssociationCodesColorScoreData()
                                            
		                                            MyAssociationCodesColorScore.setId(_id)
		                                            MyAssociationCodesColorScore.setCode(code)
		                                            MyAssociationCodesColorScore.setText(text)
		                                            MyAssociationCodesColorScore.addNew()
                                            
                                            
		                                        }
		                                    }
		                                }
                                
                                
		                                if (self.db_ins_query.rangeOfString("select") != nil) {
		                                    dbn.query(self.db_ins_query)
		                                }
		                            } else if self.sync_test_mode == true {
                                
		                                let MyAssociationCodesColorScore = AssociationCodesColorScoreData()
                                
		                                let code: String? = "1234"
		                                MyAssociationCodesColorScore.setCode(code)
		                                let text: String? = "Test Info"
		                                MyAssociationCodesColorScore.setText(text)
		                                MyAssociationCodesColorScore.addNew()
                                
		                            }
                            
		                            dbn.showRecords("codes_color_score", withFields: ["_id", "code", "text"], withHeaders: ["id", "code", "text"], withSizes: [8, 8, 30], withDataType: "AssociationCodesScurScoreData")
                            
		                        }
                        
		                        /////////////////////////////////
		                        // Association Codes Calving Ease
		                        if let codes_calving_ease = base_json["codes_calving_ease"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                AssociationCodesCalvingEase.truncate()
		                            }
		                            for (var i = 0; i < codes_calving_ease.count ; i += 1 ) {
                                
		                                if let get_calving_ease = codes_calving_ease[i] as? NSDictionary {
                                    
		                                    let _id = get_calving_ease["_id"] as? Int
		                                    let code = get_calving_ease["code"] as? String
		                                    let text = get_calving_ease["text"] as? String
                                    
		                                    if DBUtils.isNewDB() {
                                        
		                                        let MyAssociationCodesCalvingEase = AssociationCodesCalvingEaseData()
                                        
		                                        MyAssociationCodesCalvingEase.setId(_id)
		                                        MyAssociationCodesCalvingEase.setCode(code)
		                                        MyAssociationCodesCalvingEase.setText(text)
		                                        MyAssociationCodesCalvingEase.addNew()
                                        
		                                    } else { // db old
                                        
                                        
		                                    }
		                                }
		                            }
                            
		                            let dbn = Database()
		                            if (self.db_ins_query.rangeOfString("select") != nil) {
		                                dbn.query(self.db_ins_query)
		                            }
                            
		                            dbn.showRecords("codes_calving_ease", withFields: ["_id", "code", "text"], withHeaders: ["id", "code", "text"], withSizes: [8, 8, 30], withDataType: "AssociationCodesCalvingEaseData")
                            
		                        }
                        
		                        ////////////////////////////////////
		                        // Association Codes Management Code
		                        if let codes_management_code = base_json["codes_management_code"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                AssociationCodesManagement.truncate()
		                            }
		                            for (var i = 0; i < codes_management_code.count ; i += 1 ) {
                                
		                                if let get_management_code = codes_management_code[i] as? NSDictionary {
                                    
		                                    let _id = get_management_code["_id"] as? Int
		                                    let code = get_management_code["code"] as? String
		                                    let text = get_management_code["text"] as? String
                                    
		                                    if DBUtils.isNewDB() {
                                        
		                                        let MyAssociationCodesManagement = AssociationCodesManagementData()
                                        
		                                        MyAssociationCodesManagement.setId(_id)
		                                        MyAssociationCodesManagement.setCode(code)
		                                        MyAssociationCodesManagement.setText(text)
		                                        MyAssociationCodesManagement.addNew()
                                        
		                                    } else { // db old
                                        
                                        
		                                    }
		                                }
		                            }
                            
		                            let dbn = Database()
		                            if (self.db_ins_query.rangeOfString("select") != nil) {
		                                dbn.query(self.db_ins_query)
		                            }
                            
		                            dbn.showRecords("codes_management_code", withFields: ["_id", "code", "text"], withHeaders: ["id", "code", "text"], withSizes: [8, 8, 30], withDataType: "AssociationCodesManagementData")
                            
		                        }
                        
		                        ////////////////////////////////
		                        // Association Codes Navel Score
		                        if let codes_navel_score = base_json["codes_navel_score"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                AssociationCodesNavelScore.truncate()
		                            }
		                            for (var i = 0; i < codes_navel_score.count ; i += 1 ) {
                                
		                                if let get_navel_score = codes_navel_score[i] as? NSDictionary {
                                    
		                                    let _id = get_navel_score["_id"] as? Int
		                                    let code = get_navel_score["code"] as? String
		                                    let text = get_navel_score["text"] as? String
                                    
		                                    if DBUtils.isNewDB() {
                                        
		                                        let MyAssociationCodesNavelScore = AssociationCodesNavelScoreData()
                                        
		                                        MyAssociationCodesNavelScore.setId(_id)
		                                        MyAssociationCodesNavelScore.setCode(code)
		                                        MyAssociationCodesNavelScore.setText(text)
		                                        MyAssociationCodesNavelScore.addNew()
                                        
		                                    } else { // db old
                                        
                                        
		                                    }
		                                }
		                            }
                            
		                            let dbn = Database()
		                            if (self.db_ins_query.rangeOfString("select") != nil) {
		                                dbn.query(self.db_ins_query)
		                            }
                            
		                            dbn.showRecords("codes_navel_score", withFields: ["_id", "code", "text"], withHeaders: ["id", "code", "text"], withSizes: [8, 8, 30], withDataType: "AssociationCodesNavelScoreData")
                            
		                        }
                        
		                        ////////////////////////////////
		                        // Association Codes Sheath Score
		                        if let codes_sheath_score = base_json["codes_sheath_score"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                AssociationCodesNavelScore.truncate()
		                            }
		                            for (var i = 0; i < codes_sheath_score.count ; i += 1 ) {
                                
		                                if let get_sheath_score = codes_sheath_score[i] as? NSDictionary {
                                    
		                                    //let _id = get_sheath_score["_id"] as? Int
		                                    let code = get_sheath_score["code"] as? String
		                                    let text = get_sheath_score["text"] as? String
                                    
		                                    if DBUtils.isNewDB() {
                                        
		                                        let MyAssociationCodesSheathScore = AssociationCodesSheathScoreData()
                                        
		                                        //MyAssociationCodesSheathScore.setId(_id)
		                                        MyAssociationCodesSheathScore.setCode(code)
		                                        MyAssociationCodesSheathScore.setText(text)
		                                        MyAssociationCodesSheathScore.addNew()
                                        
		                                    } else { // db old
                                        
                                        
		                                    }
		                                }
		                            }
                            
		                            let dbn = Database()
		                            if (self.db_ins_query.rangeOfString("select") != nil) {
		                                dbn.query(self.db_ins_query)
		                            }
                            
		                            dbn.showRecords("codes_sheath_score", withFields: ["_id", "code", "text"], withHeaders: ["id", "code", "text"], withSizes: [8, 8, 30], withDataType: "AssociationCodesSheathScoreData")
                            
		                        }
                        
                            
		                        ////////////////////////////////
		                        // Association Codes Temper Score
		                        if let codes_temper_score = base_json["codes_temper_score"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                AssociationCodesTemperScore.truncate()
		                            }
		                            for (var i = 0; i < codes_temper_score.count ; i += 1 ) {
                                
		                                if let get_temper_score = codes_temper_score[i] as? NSDictionary {
                                    
		                                    let _id = get_temper_score["_id"] as? Int
		                                    let code = get_temper_score["code"] as? String
		                                    let text = get_temper_score["text"] as? String
                                    
		                                    if DBUtils.isNewDB() {
                                        
		                                        let MyAssociationCodesTemperScore = AssociationCodesTemperScoreData()
                                        
		                                        MyAssociationCodesTemperScore.setId(_id)
		                                        MyAssociationCodesTemperScore.setCode(code)
		                                        MyAssociationCodesTemperScore.setText(text)
		                                        MyAssociationCodesTemperScore.addNew()
                                        
		                                    } else { // db old
                                        
                                        
		                                    }
		                                }
		                            }
                            
		                            let dbn = Database()
		                            if (self.db_ins_query.rangeOfString("select") != nil) {
		                                dbn.query(self.db_ins_query)
		                            }
                            
		                            dbn.showRecords("codes_temper_score", withFields: ["_id", "code", "text"], withHeaders: ["id", "code", "text"], withSizes: [8, 8, 30], withDataType: "AssociationCodesTemperScoreData")
                            
		                        }
                            
                        
		                        ///////////////////////////////
		                        // Association Codes Birth Type
		                        if let codes_birth_type = base_json["codes_birth_type"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                AssociationCodesTemperScore.truncate()
		                            }
		                            for (var i = 0; i < codes_birth_type.count ; i += 1 ) {
                                
		                                if let get_birth_score = codes_birth_type[i] as? NSDictionary {
                                    
		                                    //let _id = get_birth_score["_id"] as? Int
		                                    let code = get_birth_score["code"] as? String
		                                    let text = get_birth_score["text"] as? String
                                    
		                                    if DBUtils.isNewDB() {
                                        
		                                        let MyAssociationCodesBirthType = AssociationCodesBirthTypeData()
                                        
		                                        //MyAssociationCodesBirthType.setId(_id)
		                                        MyAssociationCodesBirthType.setCode(code)
		                                        MyAssociationCodesBirthType.setText(text)
		                                        MyAssociationCodesBirthType.addNew()
                                        
                                        
		                                    } else { // db old
                                        
                                        
		                                    }
		                                }
		                            }
                            
		                            let dbn = Database()
		                            if (self.db_ins_query.rangeOfString("select") != nil) {
		                                dbn.query(self.db_ins_query)
		                            }
                            
		                            dbn.showRecords("codes_birth_type", withFields: ["_id", "code", "text"], withHeaders: ["id", "code", "text"], withSizes: [8, 8, 30], withDataType: "AssociationCodesBirthTypeData")
		                        }
                        
		                        ///////////////////////////////////////////
		                        // Association Codes Udder Suspension Score
		                        if let codes_suspension_score = base_json["codes_udder_suspension_score"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                AssociationCodesUdderScoreSuspension.truncate()
		                            }
		                            for (var i = 0; i < codes_suspension_score.count ; i += 1 ) {
                                
		                                if let get_suspension_score = codes_suspension_score[i] as? NSDictionary {
                                    
		                                    let _id = get_suspension_score["_id"] as? Int
		                                    let code = get_suspension_score["code"] as? String
		                                    let text = get_suspension_score["text"] as? String
                                    
		                                    if DBUtils.isNewDB() {
                                        
		                                        let MyAssociationCodesUdderScoreSuspension = AssociationCodesUdderScoreSuspensionData()
                                        
		                                        MyAssociationCodesUdderScoreSuspension.setId(_id)
		                                        MyAssociationCodesUdderScoreSuspension.setCode(code)
		                                        MyAssociationCodesUdderScoreSuspension.setText(text)
		                                        MyAssociationCodesUdderScoreSuspension.addNew()
                                        
		                                    } else { // db old
                                        
                                        
		                                    }
		                                }
		                            }
                            
		                            let dbn = Database()
		                            if (self.db_ins_query.rangeOfString("select") != nil) {
		                                dbn.query(self.db_ins_query)
		                            }
                            
		                            dbn.showRecords("codes_udder_suspension_score", withFields: ["_id", "code", "text"], withHeaders: ["id", "code", "text"], withSizes: [8, 8, 30], withDataType: "AssociationCodesUdderScoreSuspensionData")
                            
		                        }
                        
		                        ///////////////////////////////////////////
		                        // Association Codes Udder Teat Score
		                        if let codes_udder_teat_score = base_json["codes_udder_teat_score"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                AssociationCodesUdderScoreTeatScore.truncate()
		                            }
		                            for (var i = 0; i < codes_udder_teat_score.count ; i += 1 ) {
                                
		                                if let get_udder_teat_score = codes_udder_teat_score[i] as? NSDictionary {
                                    
		                                    let _id = get_udder_teat_score["_id"] as? Int
		                                    let code = get_udder_teat_score["code"] as? String
		                                    let text = get_udder_teat_score["text"] as? String
                                    
		                                    if DBUtils.isNewDB() {
                                        
		                                        let MyAssociationCodesUdderScoreTeat = AssociationCodesUdderScoreTeatScoreData()
                                        
		                                        MyAssociationCodesUdderScoreTeat.setId(_id)
		                                        MyAssociationCodesUdderScoreTeat.setCode(code)
		                                        MyAssociationCodesUdderScoreTeat.setText(text)
		                                        MyAssociationCodesUdderScoreTeat.addNew()
                                        
		                                    } else { // db old
                                        
                                        
		                                    }
		                                }
		                            }
                            
		                            let dbn = Database()
		                            if (self.db_ins_query.rangeOfString("select") != nil) {
		                                dbn.query(self.db_ins_query)
		                            }
                            
		                            dbn.showRecords("codes_udder_teat_score", withFields: ["_id", "code", "text"], withHeaders: ["id", "code", "text"], withSizes: [8, 8, 30], withDataType: "AssociationCodesUdderScoreTeatScoreData")
                            
		                        }
                        
		                        ///////////////////////////////////////////
		                        // Association Codes Breed Codes
		                        if let codes_breed_codes = base_json["codes_breed_codes"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                AssociationCodesBreedCode.truncate()
		                            }
		                            for (var i = 0; i < codes_breed_codes.count ; i += 1 ) {
                                
		                                if let get_breed_code = codes_breed_codes[i] as? NSDictionary {
                                    
		                                    let _id = get_breed_code["_id"] as? Int
		                                    let code = get_breed_code["code"] as? String
		                                    let text = get_breed_code["text"] as? String
                                    
		                                    if DBUtils.isNewDB() {
                                        
		                                        let MyAssociationCodesBreadCode = AssociationCodesBreedCodeData()
                                        
		                                        MyAssociationCodesBreadCode.setId(_id)
		                                        MyAssociationCodesBreadCode.setCode(code)
		                                        MyAssociationCodesBreadCode.setText(text)
		                                        MyAssociationCodesBreadCode.addNew()
                                        
		                                    } else { // db old
                                        
                                        
		                                    }
		                                }
		                            }
                            
		                            let dbn = Database()
		                            if (self.db_ins_query.rangeOfString("select") != nil) {
		                                dbn.query(self.db_ins_query)
		                            }
                            
		                            dbn.showRecords("codes_breed_code", withFields: ["_id", "code", "text"], withHeaders: ["id", "code", "text"], withSizes: [8, 8, 75], withDataType: "AssociationCodesBreedCodeData")
                            
		                        }
                        
		                        ///////////////////////////////////////////
		                        // Tasks
		                        if let tasks = base_json["tasks"] as? NSArray {
                            
		                            if DBUtils.isNewDB() {
		                                Tasks.truncate()
		                            }
                            
		                            let dbn = Database()
		                            if tasks.count > 0 {
		                                for (var i = 0; i < tasks.count; i += 1 ) {
                                    
		                                    if let get_tasks = tasks[i] as? NSDictionary {
                                        
		                                        let _id = get_tasks["_id"] as? Int
		                                        let task_id = get_tasks["task_id"] as? Int
		                                        let member_id = get_tasks["member_id"] as? String
		                                        let header = get_tasks["header"] as? String
		                                        let details = get_tasks["details"] as? String
		                                        let due_date2 = get_tasks["due_date"] as? String
		                                        let due_date = Utils.convertToDateOpt(due_date2)
		                                        let date_completed2 = get_tasks["date_completed"] as? String
		                                        let date_completed = Utils.convertToDateOpt(date_completed2)
		                                        let is_completed = get_tasks["is_completed"] as? Int
		                                        if DBUtils.isNewDB() {
                                            
		                                            let MyTasks = TasksData()
                                            
		                                            MyTasks.setId(_id)
		                                            MyTasks.setTaskId(task_id)
		                                            MyTasks.setMemberId(member_id)
		                                            MyTasks.setHeader(header)
		                                            MyTasks.setDetails(details)
		                                            MyTasks.setDueDate(due_date)
		                                            MyTasks.setDateCompleted(date_completed)
		                                            MyTasks.setIsCompleted(is_completed)
		                                            MyTasks.addNew()
                                            
                                            
                                            
		                                        }
		                                    }
		                                }
                                
		                                if (self.db_ins_query.rangeOfString("select") != nil) {
		                                    dbn.query(self.db_ins_query)
		                                }
		                            } else if self.sync_test_mode == true {
                                
                                
		                            }
		                            dbn.showRecords("tasks", withFields: ["_id", "task_id", "member_id"], withHeaders: ["_id", "task_id", "member_id"], withSizes: [25, 45, 45], withDataType: "Tasks");
                            
		                        }
                        
								dispatch_async(dispatch_get_main_queue()) {   // background thread completed
							  
	                                //print("association codes completed")
                                
									self.db_cur_index += 1  // increment to 1
									self.offset = 0
									
									var send_url_sync = NSString()
									if self.default_limit == self.limit { 
								
										send_url_sync = NSString(format: "http://api.digitalbeef.com/webservice/sync_webservice.php?provider=%@&sync_flag=SYNC_FULL&member_id=%@&group=%@&offset=%@", self.db_names[self.cur_row], String(member_num_id), self.db_new_tables_list[self.db_cur_index], String(self.offset))
								
									} else {
									
										send_url_sync = NSString(format: "http://api.digitalbeef.com/webservice/sync_webservice.php?provider=%@&sync_flag=SYNC_FULL&member_id=%@&group=%@&offset=%@&limit=%@", self.db_names[self.cur_row], String(member_num_id), self.db_new_tables_list[self.db_cur_index], String(self.offset), String(self.limit))
									}
									
									let url_to_send_sync = String(send_url_sync)
                                
	                                //print("url to send, end assoc:", url_to_send_sync)
									self.get_data_from_url(url_to_send_sync)
				                }
	                        }
						
						
						} else {
							
				            let priority = DISPATCH_QUEUE_PRIORITY_DEFAULT
				            dispatch_async(dispatch_get_global_queue(priority, 0)) {  // run full sync in background*/
							
								let returned_record_count2 = base_json["record_count"] as? Int ?? 0
								self.returned_record_count = returned_record_count2
									
								if self.returned_record_count > 0 && self.db_cur_index < self.db_new_tables_list.count {
									
									
									
									
			                        ///////////////////////////////////////////
			                        // Animals
			                        if let animals = base_json["animal"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                Animals.truncate()
			                            }
			                            for (var i = 0; i < animals.count ; i += 1 ) {
                                
			                                if let get_animal = animals[i] as? NSDictionary {
                                    
			                                    //var _id = get_animal["digitalbeef_id"] as? Int
			                                    let registration = get_animal["registration"] as? String
			                                    let private_herd_number = get_animal["private_herd_number"] as? String
                                    
                                    
                                    
			                                    let eid = get_animal["eid"] as? String
			                                    let animal_name = get_animal["animal_name"] as? String
			                                    let international_id = get_animal["international_id"] as? String
			                                    let sire = get_animal["sire"] as? String
			                                    let dam = get_animal["dam"] as? String
			                                    let status = get_animal["status"] as? Int
			                                    let sex = get_animal["sex"] as? String
			                                    let metal_ear_tag = get_animal["metal_ear_tag"] as? String
			                                    let other_id = get_animal["other_id"] as? String
			                                    let breeder_id = get_animal["breeder_id"] as? String
			                                    let is_deleted = get_animal["is_deleted"] as? Int
			                                    if DBUtils.isNewDB() {
                                        
			                                        let MyAnimals = GetAnimalsData()
                                        
			                                        //MyAnimals.setId(_id)
			                                        MyAnimals.setRegistration(registration)
			                                        MyAnimals.setPrivateHerdNumber(private_herd_number)
			                                        MyAnimals.setEid(eid)
			                                        MyAnimals.setAnimalName(animal_name)
			                                        MyAnimals.setInternationalId(international_id)
			                                        MyAnimals.setSire(sire)
			                                        MyAnimals.setDam(dam)
			                                        MyAnimals.setStatus(status)
			                                        MyAnimals.setSex(sex)
			                                        MyAnimals.setMetalEarTag(metal_ear_tag)
			                                        MyAnimals.setOtherId(other_id)
			                                        MyAnimals.setBreederId(breeder_id)
			                                        MyAnimals.setIsDeleted(is_deleted)
                                        
			                                        MyAnimals.addNew()
                                        
			                                    } else { // db old
                                        
                                        
			                                    }
			                                }
			                            }
                            
			                            let dbn = Database()
			                            if (self.db_ins_query.rangeOfString("select") != nil) {
			                                dbn.query(self.db_ins_query)
			                            }
                            
			                            dbn.showRecords("animal", withFields: ["_id", "registration", "private_herd_number"], withHeaders: ["_id", "regid", "privherdnum"], withSizes: [10, 15, 30], withDataType: "AnimalsData")
                            
			                        }
                        
			                        ///////////////////////////////////////////
			                        // Animal Assessment
			                        if let animal_assessment = base_json["animal_assessment"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_assessment" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsBreed.truncate()
			                            }
			                            let dbn = Database()
			                            if animal_assessment.count > 0 {
                                
			                                for (var i = 0; i < animal_assessment.count ; i += 1 ) {
                                    
			                                    if let get_animal_assessment = animal_assessment[i] as? NSDictionary {
                                        
			                                        //let _id = get_animal_assessment["_id"] as? Int
			                                        let registration = get_animal_assessment["registration"] as? String
			                                        let member_id = get_animal_assessment["member_id"] as? String
			                                        let assessment_date2 = get_animal_assessment["assessment_date"] as? String
			                                        let assessment_date = Utils.convertToDateOpt(assessment_date2)
			                                        let assessment_year = get_animal_assessment["assessment_year"] as? Int
			                                        let assessment_season = get_animal_assessment["assessment_season"] as? String
			                                        let work_order = get_animal_assessment["work_order"] as? Int
			                                        let sex = get_animal_assessment["sex"] as? String
			                                        let calf = get_animal_assessment["calf"] as? String
			                                        let calf_birth_date2 = get_animal_assessment["calf_birth_date"] as? String
			                                        let calf_birth_date = Utils.convertToDateOpt(calf_birth_date2)
			                                        let is_canceled = get_animal_assessment["is_canceled"] as? Int
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsAssessment = AnimalsAssessmentData()
                                            
			                                            //MyAnimalsAssessment.setId(_id)
			                                            MyAnimalsAssessment.setRegistration(registration)
			                                            MyAnimalsAssessment.setMemberId(member_id)
			                                            MyAnimalsAssessment.setAssessmentDate(assessment_date)
			                                            MyAnimalsAssessment.setAssessmentYear(assessment_year)
			                                            MyAnimalsAssessment.setAssessmentSeason(assessment_season)
			                                            MyAnimalsAssessment.setWorkOrder(work_order)
			                                            MyAnimalsAssessment.setSex(sex)
			                                            MyAnimalsAssessment.setCalf(calf)
			                                            MyAnimalsAssessment.setCalfBirthDate(calf_birth_date)
			                                            MyAnimalsAssessment.setIsCanceled(is_canceled)
			                                            MyAnimalsAssessment.addNew()
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
			                                let MyAnimalsAssessment = AnimalsAssessmentData()
                                
			                                let _id: Int? = 15
			                                MyAnimalsAssessment.setId(_id)
			                                let registration: String? = "TEST123"
			                                MyAnimalsAssessment.setRegistration(registration)
			                                let member_id: String? = "111111"
			                                MyAnimalsAssessment.setMemberId(member_id)
			                                //let assessment_year: NSDate? = NSDate.distantPast() as NSDate
			                                let assessment_year: Int? = 1969
			                                MyAnimalsAssessment.setAssessmentYear(assessment_year)
			                                let assessment_season: String? = "Spring"
			                                MyAnimalsAssessment.setAssessmentSeason(assessment_season)
			                                let work_order: Int? = 1234
			                                MyAnimalsAssessment.setWorkOrder(work_order)
			                                let sex = "female"
			                                MyAnimalsAssessment.setSex(sex)
			                                MyAnimalsAssessment.addNew()
                                
			                            }
                            
			                            dbn.showRecords("animal_assessment", withFields: ["_id", "registration", "member_id"], withHeaders: ["_id", "regid", "memb_id"], withSizes: [10, 25, 20], withDataType: "AnimalsAssessment")
                            
			                        }
                        
			                        ///////////////////////////////////////////
			                        // Animal Birth
			                        if let animal_birth = base_json["animal_birth"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_birth" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsBirth.truncate()
			                            }
			                            for (var i = 0; i < animal_birth.count ; i += 1 ) {
                                
			                                if let get_animal_birth = animal_birth[i] as? NSDictionary {
                                    
			                                    let registration = get_animal_birth["registration"] as? String
			                                    let birth_date2 = get_animal_birth["birth_date"] as? String
			                                    let birth_date = Utils.convertToDateOpt(birth_date2)
			                                    let weight = get_animal_birth["weight"] as? Int
			                                    let weight_adj = get_animal_birth["weight_adj"] as? Int
			                                    let weight_ratio = get_animal_birth["weight_ratio"] as? Double
			                                    let season = get_animal_birth["season"] as? Int
			                                    let service_type = get_animal_birth["service_type"] as? String
			                                    let calving_ease = get_animal_birth["calving_ease"] as? Int
			                                    let birth_type = get_animal_birth["birth_type"] as? Int
			                                    let scur_score = get_animal_birth["scur_score"] as? String
			                                    let color_score = get_animal_birth["color_score"] as? String
			                                    let contemporary_group = get_animal_birth["contemporary_group"] as? Int
			                                    let udder_suspension_score = get_animal_birth["udder_suspension_score"] as? Int
			                                    let udder_teat_score = get_animal_birth["udder_teat_score"] as? Int
			                                    let recipient_dam = get_animal_birth["recipient_dam"] as? String
			                                    let flush_date2 = get_animal_birth["flush_date"] as? String
			                                    let flush_date = Utils.convertToDateOpt(flush_date2)
			                                    let transfer_date2 = get_animal_birth["transfer_date"] as? String
			                                    let transfer_date = Utils.convertToDateOpt(transfer_date2)
			                                    if DBUtils.isNewDB() {
                                        
			                                        let MyAnimalsBirth = AnimalsBirthData()
                                        
			                                        MyAnimalsBirth.setRegistration(registration)
			                                        MyAnimalsBirth.setBirthDate(birth_date)
			                                        MyAnimalsBirth.setWeight(weight)
			                                        MyAnimalsBirth.setWeightAdj(weight_adj)
			                                        MyAnimalsBirth.setWeightRatio(weight_ratio)
			                                        MyAnimalsBirth.setSeason(season)
			                                        MyAnimalsBirth.setServiceType(service_type)
			                                        MyAnimalsBirth.setCalvingEase(calving_ease)
			                                        MyAnimalsBirth.setBirthType(birth_type)
			                                        MyAnimalsBirth.setScurScore(scur_score)
			                                        MyAnimalsBirth.setColorScore(color_score)
			                                        MyAnimalsBirth.setContemporaryGroup(contemporary_group)
			                                        MyAnimalsBirth.setUdderSuspensionScore(udder_suspension_score)
			                                        MyAnimalsBirth.setUdderTeatScore(udder_teat_score)
			                                        MyAnimalsBirth.setRecipientDam(recipient_dam)
			                                        MyAnimalsBirth.setFlushDate(flush_date)
			                                        MyAnimalsBirth.setTransferDate(transfer_date)
			                                        MyAnimalsBirth.addNew()
                                        
			                                    } else { // db old
                                        
                                        
			                                    }
			                                }
			                            }
                            
			                            let dbn = Database()
			                            if (self.db_ins_query.rangeOfString("select") != nil) {
			                                dbn.query(self.db_ins_query)
			                            }
                            
			                            dbn.showRecords("animal_birth", withFields: ["registration", "birth_date", "weight"], withHeaders: ["regid", "birth", "weight"], withSizes: [50, 50, 15], withDataType: "AnimalsBirth")
                            
			                        }
			                        //
			                        //////////////////////////////////////////
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // Animal Breed
			                        if let animal_breeds = base_json["animal_breed"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_breed" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsBreed.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_breeds.count > 0 {
			                                for (var i = 0; i < animal_breeds.count ; i += 1 ) {
                                    
			                                    if let get_animal_breed = animal_breeds[i] as? NSDictionary {
                                        
			                                        let _id = get_animal_breed["_id"] as? Int
			                                        let registration = get_animal_breed["registration"] as? String
			                                        let code = get_animal_breed["code"] as? String
			                                        let percentage = get_animal_breed["percentage"] as? Int
                                        
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsBreed = AnimalsBreedData()
                                            
			                                            MyAnimalsBreed.setId(_id)
			                                            MyAnimalsBreed.setRegistration(registration)
			                                            MyAnimalsBreed.setCode(code)
			                                            MyAnimalsBreed.setPercentage(percentage)
                                            
			                                            MyAnimalsBreed.addNew()
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                                let MyAnimalsBreed = AnimalsBreedData()
                                
			                                let registration: String? = "TEST123"
			                                MyAnimalsBreed.setRegistration(registration)
			                                let code: String? = "1234"
			                                MyAnimalsBreed.setCode(code)
			                                let percentage: Int? = 50
			                                MyAnimalsBreed.setPercentage(percentage)
                                
			                                MyAnimalsBreed.addNew()
			                            }
                            
			                            dbn.showRecords("animal_breed", withFields: ["_id", "registration", "code"], withHeaders: ["_id", "regid", "code"], withSizes: [15, 25, 30], withDataType: "AnimalsBreed")
                            
			                        }
                        
			                        ///////////////////////////////////////////
			                        // AnimalsCarcassData
			                        if let animal_carcass = base_json["animal_carcass"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_carcass" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsCarcass.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_carcass.count > 0 {
			                                for (var i = 0; i < animal_carcass.count; i += 1 ) {
                                    
			                                    if let get_animal_carcass = animal_carcass[i] as? NSDictionary {
                                        
			                                        let registration = get_animal_carcass["registration"] as? String
			                                        let carcass_date2 = get_animal_carcass["carcass_date"] as? String
			                                        let carcass_date = Utils.convertToDateOpt(carcass_date2)
			                                        let weight = get_animal_carcass["weight"] as? Int
			                                        let carcass_number = get_animal_carcass["carcass_number"] as? String
			                                        let grade_date2 = get_animal_carcass["grade_date"] as? String
			                                        let grade_date = Utils.convertToDateOpt(grade_date2)
			                                        let fat_thickness = get_animal_carcass["fat_thickness"] as? Double
			                                        let ribeye_area = get_animal_carcass["ribeye_area"] as? Double
			                                        let kph_fat = get_animal_carcass["kph_fat"] as? Double
			                                        let marbling_score = get_animal_carcass["marbling_score"] as? Double
			                                        let quality_grade = get_animal_carcass["quality_grade"] as? String
			                                        let yield_grade = get_animal_carcass["yield_grade"] as? String
			                                        let muscle_depth = get_animal_carcass["muscle_depth"] as? String
			                                        let carcass_color = get_animal_carcass["carcass_color"] as? String
			                                        let group_pen = get_animal_carcass["group_pen"] as? String
			                                        let contemporary_group = get_animal_carcass["contemporary_group"] as? Int
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsCarcassData = AnimalsCarcassData()
                                            
			                                            MyAnimalsCarcassData.setRegistration(registration)
			                                            MyAnimalsCarcassData.setCarcassDate(carcass_date)
			                                            MyAnimalsCarcassData.setWeight(weight)
			                                            MyAnimalsCarcassData.setCarcassNumber(carcass_number)
			                                            MyAnimalsCarcassData.setGradeDate(grade_date)
			                                            MyAnimalsCarcassData.setFatThickness(fat_thickness)
			                                            MyAnimalsCarcassData.setRibeyeArea(ribeye_area)
			                                            MyAnimalsCarcassData.setKphFat(kph_fat)
			                                            MyAnimalsCarcassData.setMarblingScore(marbling_score)
			                                            MyAnimalsCarcassData.setQualityGrade(quality_grade)
			                                            MyAnimalsCarcassData.setYieldGrade(yield_grade)
			                                            MyAnimalsCarcassData.setMuscleDepth(muscle_depth)
			                                            MyAnimalsCarcassData.setCarcassColor(carcass_color)
			                                            MyAnimalsCarcassData.setGroupPen(group_pen)
			                                            MyAnimalsCarcassData.setContemporaryGroup(contemporary_group)
			                                            MyAnimalsCarcassData.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("animal_carcass", withFields: ["registration", "carcass_date", "weight"], withHeaders: ["registrati", "carcass_da", "weight"], withSizes: [25, 45, 45], withDataType: "AnimalsCarcassData");
                            
			                        }
                        
			                        ///////////////////////////////////////////
			                        // Animal Comments
			                        if let animal_comments = base_json["animal_comments"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_comments" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsComments.truncate()
			                            }
			                            let dbn = Database()
                            
			                            if animal_comments.count > 0 {
			                                for (var i = 0; i < animal_comments.count ; i += 1 ) {
                                    
			                                    if let get_animal_comment = animal_comments[i] as? NSDictionary {
                                        
			                                        let comment_id = get_animal_comment["comment_id"] as? Int
			                                        let registration = get_animal_comment["registration"] as? String
			                                        let comment = get_animal_comment["comment"] as? String
			                                        let comment_date2 = get_animal_comment["comment_date"] as? String
			                                        let comment_date = Utils.convertToDateOpt(comment_date2)
			                                        let is_deleted = get_animal_comment["is_deleted"] as? Int
			                                        let notify_user = get_animal_comment["notify_user"] as? Int
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsComments = AnimalsCommentsData()
                                            
			                                            MyAnimalsComments.setCommentId(comment_id)
			                                            MyAnimalsComments.setRegistration(registration)
			                                            MyAnimalsComments.setComment(comment)
			                                            MyAnimalsComments.setCommentDate(comment_date)
			                                            MyAnimalsComments.setIsDeleted(is_deleted)
			                                            MyAnimalsComments.setNotifyUser(notify_user)
			                                            MyAnimalsComments.addNew()
                                            
                                            
			                                        }
			                                    }
			                                }
                                
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
                                
			                            }
                            
			                            dbn.showRecords("animal_comments", withFields: ["_id", "registration", "comment"], withHeaders: ["id", "regid", "comment"], withSizes: [10, 35, 115], withDataType: "AnimalsComments")
                            
			                        }
                        
                        
			                        ///////////////////////////////////////////
			                        // Animal Birth
			                        if let animal_birth = base_json["animal_birth"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_birth" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsBirth.truncate()
			                            }
			                            for (var i = 0; i < animal_birth.count ; i += 1 ) {
                                
			                                if let get_animal_birth = animal_birth[i] as? NSDictionary {
                                    
			                                    let registration = get_animal_birth["registration"] as? String
			                                    let birth_date2 = get_animal_birth["birth_date"] as? String
			                                    let birth_date = Utils.convertToDateOpt(birth_date2)
			                                    let weight = get_animal_birth["weight"] as? Int
			                                    let weight_adj = get_animal_birth["weight_adj"] as? Int
			                                    let weight_ratio = get_animal_birth["weight_ratio"] as? Double
			                                    let season = get_animal_birth["season"] as? Int
			                                    let service_type = get_animal_birth["service_type"] as? String
			                                    let calving_ease = get_animal_birth["calving_ease"] as? Int
			                                    let birth_type = get_animal_birth["birth_type"] as? Int
			                                    let scur_score = get_animal_birth["scur_score"] as? String
			                                    let color_score = get_animal_birth["color_score"] as? String
			                                    let contemporary_group = get_animal_birth["contemporary_group"] as? Int
			                                    let udder_suspension_score = get_animal_birth["udder_suspension_score"] as? Int
			                                    let udder_teat_score = get_animal_birth["udder_teat_score"] as? Int
			                                    let recipient_dam = get_animal_birth["recipient_dam"] as? String
			                                    let flush_date2 = get_animal_birth["flush_date"] as? String
			                                    let flush_date = Utils.convertToDateOpt(flush_date2)
			                                    let transfer_date2 = get_animal_birth["transfer_date"] as? String
			                                    let transfer_date = Utils.convertToDateOpt(transfer_date2)
			                                    if DBUtils.isNewDB() {
                                        
			                                        let MyAnimalsBirth = AnimalsBirthData()
                                        
			                                        MyAnimalsBirth.setRegistration(registration)
			                                        MyAnimalsBirth.setBirthDate(birth_date)
			                                        MyAnimalsBirth.setWeight(weight)
			                                        MyAnimalsBirth.setWeightAdj(weight_adj)
			                                        MyAnimalsBirth.setWeightRatio(weight_ratio)
			                                        MyAnimalsBirth.setSeason(season)
			                                        MyAnimalsBirth.setServiceType(service_type)
			                                        MyAnimalsBirth.setCalvingEase(calving_ease)
			                                        MyAnimalsBirth.setBirthType(birth_type)
			                                        MyAnimalsBirth.setScurScore(scur_score)
			                                        MyAnimalsBirth.setColorScore(color_score)
			                                        MyAnimalsBirth.setContemporaryGroup(contemporary_group)
			                                        MyAnimalsBirth.setUdderSuspensionScore(udder_suspension_score)
			                                        MyAnimalsBirth.setUdderTeatScore(udder_teat_score)
			                                        MyAnimalsBirth.setRecipientDam(recipient_dam)
			                                        MyAnimalsBirth.setFlushDate(flush_date)
			                                        MyAnimalsBirth.setTransferDate(transfer_date)
			                                        MyAnimalsBirth.addNew()
                                        
			                                    } else { // db old
                                        
                                        
			                                    }
			                                }
			                            }
                            
			                            let dbn = Database()
			                            if (self.db_ins_query.rangeOfString("select") != nil) {
			                                dbn.query(self.db_ins_query)
			                            }
                            
			                            dbn.showRecords("animal_birth", withFields: ["registration", "birth_date", "weight"], withHeaders: ["regid", "birth", "weight"], withSizes: [50, 50, 15], withDataType: "AnimalsBirth")
                            
			                        }
			                        //
			                        //////////////////////////////////////////
                        
                        
			                        ///////////////////////////////////////////
			                        // Animal Data
			                        if let animal_data = base_json["animal_data"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_data" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsData.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_data.count > 0 {
			                                for (var i = 0; i < animal_data.count ; i += 1 ) {
                                    
			                                    if let get_animal_data = animal_data[i] as? NSDictionary {
                                        
			                                        //let _id = get_animal_data["_id"] as? Int
			                                        let registration = get_animal_data["registration"] as? String
			                                        let left_teat_count = get_animal_data["left_teat_count"] as? Int
			                                        let right_teat_count = get_animal_data["right_teat_count"] as? Int
			                                        let day_weight_250 = get_animal_data["day_weight_250"] as? String
			                                        let spi = get_animal_data["spi"] as? Double
			                                        let mli = get_animal_data["mli"] as? Double
			                                        let tsi = get_animal_data["tsi"] as? Double
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsData = AnimalsDataData()
                                            
			                                            //MyAnimalsData.setId(_id)
			                                            MyAnimalsData.setRegistration(registration)
			                                            MyAnimalsData.setLeftTeatCount(left_teat_count)
			                                            MyAnimalsData.setRightTeatCount(right_teat_count)
			                                            MyAnimalsData.setDayWeight250(day_weight_250)
			                                            MyAnimalsData.setSpi(spi)
			                                            MyAnimalsData.setMli(mli)
			                                            MyAnimalsData.setTsi(tsi)
			                                            MyAnimalsData.addNew()
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                                let MyAnimalsData = AnimalsDataData()
                                
			                                let registration: String? = "TEST123"
			                                MyAnimalsData.setRegistration(registration)
			                                let leftTeatCount: Int? = 4
			                                MyAnimalsData.setLeftTeatCount(leftTeatCount)
			                                /*let percentage: Int? = 50
			                                MyAnimalsData.setPercentage(percentage)*/
                                
			                                MyAnimalsData.addNew()
			                            }
                            
			                            dbn.showRecords("animal_data", withFields: ["registration", "left_teat_count"], withHeaders: ["regid", "leftteat"], withSizes: [25, 50], withDataType: "AnimalsDataData")
                            
			                        }
                        
                        
			                        ///////////////////////////////////////////
			                        // Animal Enrolled
			                        if let animal_enrolled = base_json["animal_enrolled"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_enrolled" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsEnrolled.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_enrolled.count > 0 {
			                                for (var i = 0; i < animal_enrolled.count ; i += 1 ) {
                                    
			                                    if let get_animal_enrolled = animal_enrolled[i] as? NSDictionary {
                                        
			                                        //let _id = get_animal_enrolled["_id"] as? Int
			                                        let registration = get_animal_enrolled["registration"] as? String
			                                        let spi = get_animal_enrolled["spi"] as? Int
			                                        let epd = get_animal_enrolled["epd"] as? Int
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsEnrolled = AnimalsEnrolledData()
                                            
			                                            //MyAnimalsEnrolled.setId(_id)
			                                            MyAnimalsEnrolled.setRegistration(registration)
			                                            MyAnimalsEnrolled.setSpi(spi)
			                                            MyAnimalsEnrolled.setEpd(epd)
			                                            MyAnimalsEnrolled.addNew()
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                                let MyAnimalsEnrolledData = AnimalsEnrolledData()
                                
			                                let registration: String? = "TEST123"
			                                MyAnimalsEnrolledData.setRegistration(registration)
			                                let spi: Int? = 1
			                                MyAnimalsEnrolledData.setSpi(spi)
                                
			                                MyAnimalsEnrolledData.addNew()
			                            }
                            
			                            dbn.showRecords("animal_enrolled", withFields: ["_id", "registration", "spi"], withHeaders: ["id", "regid", "spi"], withSizes: [15, 25, 50], withDataType: "AnimalsEnrolled")
                            
			                        }
                        
                        
			                        ///////////////////////////////////////////
			                        // Animal EPD
			                        if let animal_epd = base_json["animal_epd"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_epd" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsEnrolled.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_epd.count > 0 {
			                                for (var i = 0; i < animal_epd.count ; i += 1 ) {
                                    
			                                    if let get_animal_epd = animal_epd[i] as? NSDictionary {
                                        
			                                        //let epd_id = get_animal_epd["epd_id"] as? Int
			                                        let registration = get_animal_epd["registration"] as? String
			                                        let epd_year = get_animal_epd["epd_year"] as? Int
			                                        let epd_season = get_animal_epd["epd_season"] as? String
			                                        let bw_epd = get_animal_epd["bw_epd"] as? Double
			                                        let bw_acc = get_animal_epd["bw_acc"] as? Double
			                                        let ww_epd = get_animal_epd["ww_epd"] as? Double
			                                        let ww_acc = get_animal_epd["ww_acc"] as? Double
			                                        let yw_epd = get_animal_epd["yw_epd"] as? Double
			                                        let yw_acc = get_animal_epd["yw_acc"] as? Double
			                                        let milk_epd = get_animal_epd["milk_epd"] as? Double
			                                        let milk_acc = get_animal_epd["milk_acc"] as? Double
			                                        let sc_epd = get_animal_epd["sc_epd"] as? Double
			                                        let sc_acc = get_animal_epd["sc_acc"] as? Double
			                                        let rea_epd = get_animal_epd["rea_epd"] as? Double
			                                        let rea_acc = get_animal_epd["rea_acc"] as? Double
			                                        let fat_epd = get_animal_epd["fat_epd"] as? Double
			                                        let fat_acc = get_animal_epd["fat_acc"] as? Double
			                                        let imf_epd = get_animal_epd["imf_epd"] as? Double
			                                        let imf_acc = get_animal_epd["imf_acc"] as? Double
			                                        let ced_epd = get_animal_epd["ced_epd"] as? Double
			                                        let ced_acc = get_animal_epd["ced_acc"] as? Double
			                                        let cem_epd = get_animal_epd["cem_epd"] as? Double
			                                        let cem_acc = get_animal_epd["cem_acc"] as? Double
			                                        let tm_epd = get_animal_epd["tm_epd"] as? Double
			                                        let tm_acc = get_animal_epd["tm_acc"] as? Double
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsEpd = AnimalsEpdData()
                                            
			                                            //MyAnimalsEpd.setEpdId(epd_id)
			                                            MyAnimalsEpd.setRegistration(registration)
			                                            MyAnimalsEpd.setEpdYear(epd_year)
			                                            MyAnimalsEpd.setEpdSeason(epd_season)
			                                            MyAnimalsEpd.setBwEpd(bw_epd)
			                                            MyAnimalsEpd.setBwAcc(bw_acc)
			                                            MyAnimalsEpd.setWwEpd(ww_epd)
			                                            MyAnimalsEpd.setWwAcc(ww_acc)
			                                            MyAnimalsEpd.setYwEpd(yw_epd)
			                                            MyAnimalsEpd.setYwAcc(yw_acc)
			                                            MyAnimalsEpd.setMilkEpd(milk_epd)
			                                            MyAnimalsEpd.setMilkAcc(milk_acc)
			                                            MyAnimalsEpd.setScEpd(sc_epd)
			                                            MyAnimalsEpd.setScAcc(sc_acc)
			                                            MyAnimalsEpd.setReaEpd(rea_epd)
			                                            MyAnimalsEpd.setReaAcc(rea_acc)
			                                            MyAnimalsEpd.setFatEpd(fat_epd)
			                                            MyAnimalsEpd.setFatAcc(fat_acc)
			                                            MyAnimalsEpd.setImfEpd(imf_epd)
			                                            MyAnimalsEpd.setImfAcc(imf_acc)
			                                            MyAnimalsEpd.setCedEpd(ced_epd)
			                                            MyAnimalsEpd.setCedAcc(ced_acc)
			                                            MyAnimalsEpd.setCemEpd(cem_epd)
			                                            MyAnimalsEpd.setCemAcc(cem_acc)
			                                            MyAnimalsEpd.setTmEpd(tm_epd)
			                                            MyAnimalsEpd.setTmAcc(tm_acc)
                                            
			                                            MyAnimalsEpd.addNew()
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                                let MyAnimalsEpdData = AnimalsEpdData()
                                
			                                let registration: String? = "TEST123"
			                                MyAnimalsEpdData.setRegistration(registration)
			                                let epd_year: Int? = nil
			                                MyAnimalsEpdData.setEpdYear(epd_year)
			                                let epd_season: String? = "Spring"
			                                MyAnimalsEpdData.setEpdSeason(epd_season)
                                
			                                MyAnimalsEpdData.addNew()
			                            }
                            
			                            dbn.showRecords("animal_epd", withFields: ["_id", "registration", "epd_year"], withHeaders: ["id", "regid", "epdyear"], withSizes: [15, 25, 50], withDataType: "AnimalsEpd")
                            
			                        }
                        
			                        ///////////////////////////////////////////
			                        // Animal Estrous
			                        if let animal_estrous = base_json["animal_estrous"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_estrous" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsEstrous.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_estrous.count > 0 {
			                                for (var i = 0; i < animal_estrous.count ; i += 1 ) {
                                    
			                                    if let get_animal_estrous = animal_estrous[i] as? NSDictionary {
                                        
                                        
			                                        let estrous_id = get_animal_estrous["estrous_id"] as? Int
			                                        let registration = get_animal_estrous["registration"] as? String
			                                        let estrous_date2 = get_animal_estrous["estrous_date"] as? String
			                                        let estrous_date = Utils.convertToDateOpt(estrous_date2)
			                                        let time_period = get_animal_estrous["time_period"] as? String
			                                        let is_deleted = get_animal_estrous["is_deleted"] as? Int
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsEstrous = AnimalsEstrousData()
                                            
			                                            MyAnimalsEstrous.setEstrousId(estrous_id)
			                                            MyAnimalsEstrous.setRegistration(registration)
			                                            MyAnimalsEstrous.setEstrousDate(estrous_date)
			                                            MyAnimalsEstrous.setTimePeriod(time_period)
			                                            MyAnimalsEstrous.setIsDeleted(is_deleted)
			                                            MyAnimalsEstrous.addNew()
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
			                                /*let MyAnimalsEpdData = AnimalsEpdData()
			                                let registration: String? = "TEST123"
			                                MyAnimalsEpdData.setRegistration(registration)
			                                MyAnimalsEpdData.addNew()*/
			                            }
                            
			                            dbn.showRecords("animal_estrous", withFields: ["_id", "registration", "estrous_date"], withHeaders: ["id", "regid", "estrusdate"], withSizes: [15, 50, 50], withDataType: "AnimalsEstrous")
                            
			                        }
                        
			                        ///////////////////////////////////////////
			                        // AnimalsHealth
			                        if let animal_health = base_json["animal_health"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_health" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsHealth.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_health.count > 0 {
			                                for (var i = 0; i < animal_health.count; i += 1 ) {
                                    
			                                    if let get_animal_health = animal_health[i] as? NSDictionary {
                                        
			                                        let health_id = get_animal_health["health_id"] as? Int
			                                        let registration = get_animal_health["registration"] as? String
			                                        let date_administered2 = get_animal_health["date_administered"] as? String
			                                        let date_administered = Utils.convertToDateOpt(date_administered2)
			                                        let product_name = get_animal_health["product_name"] as? String
			                                        let serial_number = get_animal_health["serial_number"] as? String
			                                        let dosage = get_animal_health["dosage"] as? String
			                                        let location = get_animal_health["location"] as? String
			                                        let withdrawal_period = get_animal_health["withdrawal_period"] as? String
			                                        let administered_by = get_animal_health["administered_by"] as? String
			                                        let lot_number = get_animal_health["lot_number"] as? String
			                                        let method = get_animal_health["method"] as? String
			                                        let expiration_date2 = get_animal_health["expiration_date"] as? String
			                                        let expiration_date = Utils.convertToDateOpt(expiration_date2)
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsHealth = AnimalsHealthData()
                                            
			                                            MyAnimalsHealth.setHealthId(health_id)
			                                            MyAnimalsHealth.setRegistration(registration)
			                                            MyAnimalsHealth.setDateAdministered(date_administered)
			                                            MyAnimalsHealth.setProductName(product_name)
			                                            MyAnimalsHealth.setSerialNumber(serial_number)
			                                            MyAnimalsHealth.setDosage(dosage)
			                                            MyAnimalsHealth.setLocation(location)
			                                            MyAnimalsHealth.setWithdrawalPeriod(withdrawal_period)
			                                            MyAnimalsHealth.setAdministeredBy(administered_by)
			                                            MyAnimalsHealth.setLotNumber(lot_number)
			                                            MyAnimalsHealth.setMethod(method)
			                                            MyAnimalsHealth.setExpirationDate(expiration_date)
			                                            MyAnimalsHealth.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("animal_health", withFields: ["_id", "registration", "date_administered"], withHeaders: ["health_id", "registrati", "date_admin"], withSizes: [25, 45, 45], withDataType: "AnimalsHealth");
                            
			                        }
                        
                        
			                        ///////////////////////////////////////////
			                        // Animal Legacy
			                        if let animal_legacy = base_json["animal_legacy"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_legacy" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsLegacy.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_legacy.count > 0 {
			                                for (var i = 0; i < animal_legacy.count ; i += 1 ) {
                                    
			                                    if let get_animal_legacy = animal_legacy[i] as? NSDictionary {
                                        
			                                        //let _id = get_animal_legacy["_id"] as? Int
			                                        let registration = get_animal_legacy["registration"] as? String
			                                        let member_id = get_animal_legacy["member_id"] as? String
			                                        let legacy_date2 = get_animal_legacy["legacy_date"] as? String
			                                        let legacy_date = Utils.convertToDateOpt(legacy_date2)
			                                        let reason = get_animal_legacy["reason"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsLegacy = AnimalsLegacyData()
                                            
			                                            //MyAnimalsLegacy.setId(_id)
			                                            MyAnimalsLegacy.setRegistration(registration)
			                                            MyAnimalsLegacy.setMemberId(member_id)
			                                            MyAnimalsLegacy.setLegacyDate(legacy_date)
			                                            MyAnimalsLegacy.setReason(reason)
			                                            MyAnimalsLegacy.addNew()
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
			                                let MyAnimalsLegacyData = AnimalsLegacyData()
                                
			                                let registration: String? = "TEST123"
			                                MyAnimalsLegacyData.setRegistration(registration)
                                
			                                let member_id: String? = "111111"
			                                MyAnimalsLegacyData.setMemberId(member_id)
                                
			                                MyAnimalsLegacyData.addNew()
			                            }
                            
			                            dbn.showRecords("animal_legacy", withFields: ["_id", "registration", "member_id"], withHeaders: ["id", "regid", "membid"], withSizes: [15, 35, 35], withDataType: "AnimalsLegacy")
                            
			                        }
                        
			                        ///////////////////////////////////////////
			                        // Animal Location
			                        if let animal_pasture_location = base_json["animal_location"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_location" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsPastureLocation.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_pasture_location.count > 0 {
			                                for (var i = 0; i < animal_pasture_location.count ; i += 1 ) {
                                    
			                                    if let get_animal_pasture_location = animal_pasture_location[i] as? NSDictionary {
                                        
			                                        //let _id = get_animal_location["_id"] as? Int
			                                        let registration = get_animal_pasture_location["registration"] as? String
			                                        let pasture_id = get_animal_pasture_location["pasture_id"] as? Int
			                                        let move_in2 = get_animal_pasture_location["move_in"] as? String
			                                        let move_in = Utils.convertToDateOpt(move_in2)
                                        
			                                        let move_out2 = get_animal_pasture_location["move_out"] as? String
			                                        let move_out = Utils.convertToDateOpt(move_out2)
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsLocation = AnimalsPastureLocationData()
                                            
			                                            //MyAnimalsLocation.setId(_id)
			                                            MyAnimalsLocation.setRegistration(registration)
			                                            MyAnimalsLocation.setPastureId(pasture_id)
			                                            MyAnimalsLocation.setMoveIn(move_in)
			                                            MyAnimalsLocation.setMoveOut(move_out)
			                                            //MyAnimalsLocation.addNew()
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
			                                /*let MyAnimalsLocationData = AnimalsPastureLocationData()
                                
			                                let registration: String? = "TEST123"
			                                MyAnimalsLocationData.setRegistration(registration)
                                
			                                let pasture_id: Int? = 123
			                                MyAnimalsLocationData.setPastureId(pasture_id)
                                
			                                let move_in: NSDate? = Utils.convertToDateTimeOpt("2016-03-15 12:37:00")
			                                MyAnimalsLocationData.setMoveIn(move_in)
                                
			                                MyAnimalsLocationData.addNew()*/
			                            }
                            
			                            dbn.showRecords("animal_location", withFields: ["_id", "registration", "move_in"], withHeaders: ["id", "regid", "move_in"], withSizes: [15, 35, 35], withDataType: "AnimalsPastureLocation")
                            
			                        }
                        
			                        ///////////////////////////////////////////
			                        // Pen Location
			                        if let animal_pen_location = base_json["pen_location"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "pen_location" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsPenLocation.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_pen_location.count > 0 {
			                                for (var i = 0; i < animal_pen_location.count ; i += 1 ) {
                                    
			                                    if let get_animal_pen_location = animal_pen_location[i] as? NSDictionary {
                                        
			                                        let _id = get_animal_pen_location["_id"] as? Int
			                                        let pen_id = get_animal_pen_location["pen_id"] as? Int
			                                        let member_id = get_animal_pen_location["member_id"] as? String
			                                        let registration = get_animal_pen_location["registration"] as? String
			                                        let move_in2 = get_animal_pen_location["move_in"] as? String
			                                        let move_in = Utils.convertToDateOpt(move_in2)
			                                        let move_out2 = get_animal_pen_location["move_out"] as? String
			                                        let move_out = Utils.convertToDateOpt(move_out2)
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsPenLocation = AnimalsPenLocationData()
                                            
			                                            MyAnimalsPenLocation.setId(_id)
			                                            MyAnimalsPenLocation.setPenId(pen_id)
			                                            MyAnimalsPenLocation.setMemberId(member_id)
			                                            MyAnimalsPenLocation.setRegistration(registration)
			                                            MyAnimalsPenLocation.setMoveIn(move_in)
			                                            MyAnimalsPenLocation.setMoveOut(move_out)
			                                            MyAnimalsPenLocation.addNew()
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
                            
			                            dbn.showRecords("pen_location", withFields: ["_id", "registration", "pen_id"], withHeaders: ["id", "regid", "pend_id"], withSizes: [15, 35, 35], withDataType: "AnimalsPenLocation")
                            
			                        }
                        
			                        ///////////////////////////////////////////
			                        // Animal Measurements
			                        if let animal_measurements = base_json["animal_measurements"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_measurements" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsMeasurements.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_measurements.count > 0 {
			                                for (var i = 0; i < animal_measurements.count; i += 1 ) {
                                    
			                                    if let get_animal_measurement = animal_measurements[i] as? NSDictionary {
                                        
			                                        //let _id = get_animal_measurement["_id"] as? Int
			                                        let registration = get_animal_measurement["registration"] as? String
			                                        let measurement_date2 = get_animal_measurement["measurement_date"] as? String
			                                        let measurement_date = Utils.convertToDateOpt(measurement_date2)
			                                        let weight = get_animal_measurement["weight"] as? Int
			                                        let height = get_animal_measurement["height"] as? Double
			                                        let frame_score = get_animal_measurement["frame_score"] as? Double
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsMeasurements = AnimalsMeasurementsData()
                                            
			                                            //MyAnimalsMeasurements.setId(_id)
			                                            MyAnimalsMeasurements.setRegistration(registration)
			                                            MyAnimalsMeasurements.setMeasurementDate(measurement_date)
			                                            MyAnimalsMeasurements.setWeight(weight)
			                                            MyAnimalsMeasurements.setHeight(height)
			                                            MyAnimalsMeasurements.setFrameScore(frame_score)
                                            
                                            
                                            
			                                            MyAnimalsMeasurements.addNew()
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
                            
			                            dbn.showRecords("animal_measurements", withFields: ["_id", "registration", "measurement_date"], withHeaders: ["id", "regid", "meas_date"], withSizes: [15, 35, 35], withDataType: "AnimalsMeasurements")
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // AnimalsBreeding
			                        if let animal_breeding = base_json["animal_breeding"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_breeding" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsBreeding.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_breeding.count > 0 {
			                                for (var i = 0; i < animal_breeding.count; i += 1 ) {
                                    
			                                    if let get_animal_breeding = animal_breeding[i] as? NSDictionary {
                                        
			                                        let breeding_id = get_animal_breeding["breeding_id"] as? Int
			                                        let type = get_animal_breeding["type"] as? String
			                                        let work_order = get_animal_breeding["work_order"] as? Int
			                                        let dam = get_animal_breeding["dam"] as? String
			                                        let sire = get_animal_breeding["sire"] as? String
			                                        let calf = get_animal_breeding["calf"] as? String
			                                        let begin_date2 = get_animal_breeding["begin_date"] as? String
			                                        let begin_date = Utils.convertToDateOpt(begin_date2)
			                                        let end_date2 = get_animal_breeding["end_date"] as? String
			                                        let end_date = Utils.convertToDateOpt(end_date2)
			                                        let ai_date2 = get_animal_breeding["ai_date"] as? String
			                                        let ai_date = Utils.convertToDateOpt(ai_date2)
			                                        let recipient_dam = get_animal_breeding["recipient_dam"] as? String
			                                        let transfer_date2 = get_animal_breeding["transfer_date"] as? String
			                                        let transfer_date = Utils.convertToDateOpt(transfer_date2)
			                                        let flush_date2 = get_animal_breeding["flush_date"] as? String
			                                        let flush_date = Utils.convertToDateOpt(flush_date2)
			                                        let palpation_result = get_animal_breeding["palpation_result"] as? String
			                                        let palpation_date2 = get_animal_breeding["palpation_date"] as? String
			                                        let palpation_date = Utils.convertToDateOpt(palpation_date2)
			                                        let ai_cert = get_animal_breeding["ai_cert"] as? Int
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsBreeding = AnimalsBreedingData()
                                            
			                                            MyAnimalsBreeding.setBreedingId(breeding_id)
			                                            MyAnimalsBreeding.setType(type)
			                                            MyAnimalsBreeding.setWorkOrder(work_order)
			                                            MyAnimalsBreeding.setDam(dam)
			                                            MyAnimalsBreeding.setSire(sire)
			                                            MyAnimalsBreeding.setCalf(calf)
			                                            MyAnimalsBreeding.setBeginDate(begin_date)
			                                            MyAnimalsBreeding.setEndDate(end_date)
			                                            MyAnimalsBreeding.setAiDate(ai_date)
			                                            MyAnimalsBreeding.setRecipientDam(recipient_dam)
			                                            MyAnimalsBreeding.setTransferDate(transfer_date)
			                                            MyAnimalsBreeding.setFlushDate(flush_date)
			                                            MyAnimalsBreeding.setPalpationResult(palpation_result)
			                                            MyAnimalsBreeding.setPalpationDate(palpation_date)
			                                            MyAnimalsBreeding.setAiCert(ai_cert)
			                                            MyAnimalsBreeding.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("animal_breeding", withFields: ["_id", "type", "work_order"], withHeaders: ["_id", "type", "work_order"], withSizes: [25, 45, 45], withDataType: "AnimalsBreeding");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // AnimalsPedigree
			                        if let animal_pedigree = base_json["animal_pedigree"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_pedigree" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsPedigree.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_pedigree.count > 0 {
			                                for (var i = 0; i < animal_pedigree.count; i += 1 ) {
                                    
			                                    if let get_animal_pedigree = animal_pedigree[i] as? NSDictionary {
                                        
			                                        //let pedigree_id = get_animal_pedigree["pedigree_id"] as? Int
			                                        let registration = get_animal_pedigree["registration"] as? String
			                                        let member_id = get_animal_pedigree["member_id"] as? String
			                                        let is_validated = get_animal_pedigree["is_validated"] as? Int
			                                        let sire = get_animal_pedigree["sire"] as? String
			                                        let dam = get_animal_pedigree["dam"] as? String
			                                        let sire_sire = get_animal_pedigree["sire_sire"] as? String
			                                        let sire_sire_sire = get_animal_pedigree["sire_sire_sire"] as? String
			                                        let sire_sire_dam = get_animal_pedigree["sire_sire_dam"] as? String
			                                        let sire_dam = get_animal_pedigree["sire_dam"] as? String
			                                        let sire_dam_sire = get_animal_pedigree["sire_dam_sire"] as? String
			                                        let sire_dam_dam = get_animal_pedigree["sire_dam_dam"] as? String
			                                        let dam_sire_sire = get_animal_pedigree["dam_sire_sire"] as? String
			                                        let dam_sire_dam = get_animal_pedigree["dam_sire_dam"] as? String
			                                        let dam_sire = get_animal_pedigree["dam_sire"] as? String
			                                        let dam_dam = get_animal_pedigree["dam_dam"] as? String
			                                        let dam_dam_sire = get_animal_pedigree["dam_dam_sire"] as? String
			                                        let dam_dam_dam = get_animal_pedigree["dam_dam_dam"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsPedigree = AnimalsPedigreeData()
                                            
			                                            //MyAnimalsPedigree.setPedigreeId(pedigree_id)
			                                            MyAnimalsPedigree.setRegistration(registration)
			                                            MyAnimalsPedigree.setMemberId(member_id)
			                                            MyAnimalsPedigree.setIsValidated(is_validated)
			                                            MyAnimalsPedigree.setSire(sire)
			                                            MyAnimalsPedigree.setDam(dam)
			                                            MyAnimalsPedigree.setSireSire(sire_sire)
			                                            MyAnimalsPedigree.setSireSireSire(sire_sire_sire)
			                                            MyAnimalsPedigree.setSireSireDam(sire_sire_dam)
			                                            MyAnimalsPedigree.setSireDam(sire_dam)
			                                            MyAnimalsPedigree.setSireDamSire(sire_dam_sire)
			                                            MyAnimalsPedigree.setSireDamDam(sire_dam_dam)
			                                            MyAnimalsPedigree.setDamSireSire(dam_sire_sire)
			                                            MyAnimalsPedigree.setDamSireDam(dam_sire_dam)
			                                            MyAnimalsPedigree.setDamSire(dam_sire)
			                                            MyAnimalsPedigree.setDamDam(dam_dam)
			                                            MyAnimalsPedigree.setDamDamSire(dam_dam_sire)
			                                            MyAnimalsPedigree.setDamDamDam(dam_dam_dam)
			                                            MyAnimalsPedigree.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("animal_pedigree", withFields: ["_id", "registration", "member_id"], withHeaders: ["pedigree_i", "registrati", "member_id"], withSizes: [25, 45, 45], withDataType: "AnimalsPedigree");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // AnimalsSynchronization
			                        if let animal_synchronization = base_json["animal_synchronization"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_synchronization"
                                    {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsSynchronization.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_synchronization.count > 0 {
			                                for (var i = 0; i < animal_synchronization.count; i += 1 ) {
                                    
			                                    if let get_animal_synchronization = animal_synchronization[i] as? NSDictionary {
                                        
			                                        //let sync_id = get_animal_synchronization["sync_id"] as? Int
			                                        let registration = get_animal_synchronization["registration"] as? String
			                                        let sync_date2 = get_animal_synchronization["sync_date"] as? String
			                                        let sync_date = Utils.convertToDateOpt(sync_date2)
			                                        let comment = get_animal_synchronization["comment"] as? String
			                                        let is_deleted = get_animal_synchronization["is_deleted"] as? Int
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsSynchronization = AnimalsSynchronizationData()
                                            
			                                            //MyAnimalsSynchronization.setSyncId(sync_id)
			                                            MyAnimalsSynchronization.setRegistration(registration)
			                                            MyAnimalsSynchronization.setSyncDate(sync_date)
			                                            MyAnimalsSynchronization.setComment(comment)
			                                            MyAnimalsSynchronization.setIsDeleted(is_deleted)
			                                            MyAnimalsSynchronization.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("animal_synchronization", withFields: ["_id", "registration", "sync_date"], withHeaders: ["sync_id", "registrati", "sync_date"], withSizes: [25, 45, 45], withDataType: "AnimalsSynchronization");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // AnimalsUltrasound
			                        if let animal_ultrasound = base_json["animal_ultrasound"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_ultrasound" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsUltrasound.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_ultrasound.count > 0 {
			                                for (var i = 0; i < animal_ultrasound.count; i += 1 ) {
                                    
			                                    if let get_animal_ultrasound = animal_ultrasound[i] as? NSDictionary {
                                        
			                                        let registration = get_animal_ultrasound["registration"] as? String
			                                        let ultrasound_date2 = get_animal_ultrasound["ultrasound_date"] as? String
			                                        let ultrasound_date = Utils.convertToDateOpt(ultrasound_date2)
			                                        let weight = get_animal_ultrasound["weight"] as? Int
			                                        let height = get_animal_ultrasound["height"] as? Double
			                                        let scrotal_circumference = get_animal_ultrasound["scrotal_circumference"] as? Int
			                                        let management_code = get_animal_ultrasound["management_code"] as? Int
			                                        let contemporary_group = get_animal_ultrasound["contemporary_group"] as? Int
			                                        let technician = get_animal_ultrasound["technician"] as? String
			                                        let hardware = get_animal_ultrasound["hardware"] as? String
			                                        let software = get_animal_ultrasound["software"] as? String
			                                        let ribeye_area = get_animal_ultrasound["ribeye_area"] as? Double
			                                        let backfat_thickness = get_animal_ultrasound["backfat_thickness"] as? Double
			                                        let intramuscular_fat = get_animal_ultrasound["intramuscular_fat"] as? Double
			                                        let rump_fat = get_animal_ultrasound["rump_fat"] as? Double
			                                        let ribeye_area_adj = get_animal_ultrasound["ribeye_area_adj"] as? Double
			                                        let backfat_thickness_adj = get_animal_ultrasound["backfat_thickness_adj"] as? Double
			                                        let intramuscular_fat_adj = get_animal_ultrasound["intramuscular_fat_adj"] as? Double
			                                        let rump_fat_adj = get_animal_ultrasound["rump_fat_adj"] as? Double
			                                        let ribeye_area_ratio = get_animal_ultrasound["ribeye_area_ratio"] as? Double
			                                        let backfat_thickness_ratio = get_animal_ultrasound["backfat_thickness_ratio"] as? Double
			                                        let intramuscular_fat_ratio = get_animal_ultrasound["intramuscular_fat_ratio"] as? Double
			                                        let rump_fat_ratio = get_animal_ultrasound["rump_fat_ratio"] as? Double
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsUltrasound = AnimalsUltrasoundData()
                                            
			                                            MyAnimalsUltrasound.setRegistration(registration)
			                                            MyAnimalsUltrasound.setUltrasoundDate(ultrasound_date)
			                                            MyAnimalsUltrasound.setWeight(weight)
			                                            MyAnimalsUltrasound.setHeight(height)
			                                            MyAnimalsUltrasound.setScrotalCircumference(scrotal_circumference)
			                                            MyAnimalsUltrasound.setManagementCode(management_code)
			                                            MyAnimalsUltrasound.setContemporaryGroup(contemporary_group)
			                                            MyAnimalsUltrasound.setTechnician(technician)
			                                            MyAnimalsUltrasound.setHardware(hardware)
			                                            MyAnimalsUltrasound.setSoftware(software)
			                                            MyAnimalsUltrasound.setRibeyeArea(ribeye_area)
			                                            MyAnimalsUltrasound.setBackfatThickness(backfat_thickness)
			                                            MyAnimalsUltrasound.setIntramuscularFat(intramuscular_fat)
			                                            MyAnimalsUltrasound.setRumpFat(rump_fat)
			                                            MyAnimalsUltrasound.setRibeyeAreaAdj(ribeye_area_adj)
			                                            MyAnimalsUltrasound.setBackfatThicknessAdj(backfat_thickness_adj)
			                                            MyAnimalsUltrasound.setIntramuscularFatAdj(intramuscular_fat_adj)
			                                            MyAnimalsUltrasound.setRumpFatAdj(rump_fat_adj)
			                                            MyAnimalsUltrasound.setRibeyeAreaRatio(ribeye_area_ratio)
			                                            MyAnimalsUltrasound.setBackfatThicknessRatio(backfat_thickness_ratio)
			                                            MyAnimalsUltrasound.setIntramuscularFatRatio(intramuscular_fat_ratio)
			                                            MyAnimalsUltrasound.setRumpFatRatio(rump_fat_ratio)
			                                            MyAnimalsUltrasound.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("animal_ultrasound", withFields: ["registration", "ultrasound_date", "weight"], withHeaders: ["registrati", "ultrasound", "weight"], withSizes: [25, 45, 45], withDataType: "AnimalsUltrasound");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // AnimalsWean
			                        if let animal_wean = base_json["animal_wean"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_wean" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsWean.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_wean.count > 0 {
			                                for (var i = 0; i < animal_wean.count; i += 1 ) {
                                    
			                                    if let get_animal_wean = animal_wean[i] as? NSDictionary {
                                        
			                                        let registration = get_animal_wean["registration"] as? String
			                                        let wean_date2 = get_animal_wean["wean_date"] as? String
			                                        let wean_date = Utils.convertToDateOpt(wean_date2)
			                                        let weight = get_animal_wean["weight"] as? Int
			                                        let weight_adj = get_animal_wean["weight_adj"] as? Int
			                                        let weight_ratio = get_animal_wean["weight_ratio"] as? Double
			                                        let height = get_animal_wean["height"] as? Double
			                                        let scrotal_circumference = get_animal_wean["scrotal_circumference"] as? Int
			                                        let sheath_score = get_animal_wean["sheath_score"] as? Int
			                                        let navel_score = get_animal_wean["navel_score"] as? Int
			                                        let temper_score = get_animal_wean["temper_score"] as? Int
			                                        let management_code = get_animal_wean["management_code"] as? Int
			                                        let contemporary_group = get_animal_wean["contemporary_group"] as? Int
			                                        let frame_score = get_animal_wean["frame_score"] as? Double
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsWean = AnimalsWeanData()
                                            
			                                            MyAnimalsWean.setRegistration(registration)
			                                            MyAnimalsWean.setWeanDate(wean_date)
			                                            MyAnimalsWean.setWeight(weight)
			                                            MyAnimalsWean.setWeightAdj(weight_adj)
			                                            MyAnimalsWean.setWeightRatio(weight_ratio)
			                                            MyAnimalsWean.setHeight(height)
			                                            MyAnimalsWean.setScrotalCircumference(scrotal_circumference)
			                                            MyAnimalsWean.setSheathScore(sheath_score)
			                                            MyAnimalsWean.setNavelScore(navel_score)
			                                            MyAnimalsWean.setTemperScore(temper_score)
			                                            MyAnimalsWean.setManagementCode(management_code)
			                                            MyAnimalsWean.setContemporaryGroup(contemporary_group)
			                                            MyAnimalsWean.setFrameScore(frame_score)
			                                            MyAnimalsWean.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("animal_wean", withFields: ["registration", "wean_date", "weight"], withHeaders: ["registrati", "wean_date", "weight"], withSizes: [25, 45, 45], withDataType: "AnimalsWean");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // AnimalsYear
			                        if let animal_year = base_json["animal_year"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "animal_year" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                AnimalsYear.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if animal_year.count > 0 {
			                                for (var i = 0; i < animal_year.count; i += 1 ) {
                                    
			                                    if let get_animal_year = animal_year[i] as? NSDictionary {
                                        
			                                        let registration = get_animal_year["registration"] as? String
			                                        let year_date2 = get_animal_year["year_date"] as? String
			                                        let year_date = Utils.convertToDateOpt(year_date2)
			                                        let weight = get_animal_year["weight"] as? Int
			                                        let weight_adj = get_animal_year["weight_adj"] as? Int
			                                        let weight_ratio = get_animal_year["weight_ratio"] as? Double
			                                        let height = get_animal_year["height"] as? Double
			                                        let scrotal_circumference = get_animal_year["scrotal_circumference"] as? Int
			                                        let sheath_score = get_animal_year["sheath_score"] as? Int
			                                        let navel_score = get_animal_year["navel_score"] as? Int
			                                        let temper_score = get_animal_year["temper_score"] as? Int
			                                        let management_code = get_animal_year["management_code"] as? Int
			                                        let contemporary_group = get_animal_year["contemporary_group"] as? Int
			                                        let frame_score = get_animal_year["frame_score"] as? Double
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyAnimalsYear = AnimalsYearData()
                                            
			                                            MyAnimalsYear.setRegistration(registration)
			                                            MyAnimalsYear.setYearDate(year_date)
			                                            MyAnimalsYear.setWeight(weight)
			                                            MyAnimalsYear.setWeightAdj(weight_adj)
			                                            MyAnimalsYear.setWeightRatio(weight_ratio)
			                                            MyAnimalsYear.setHeight(height)
			                                            MyAnimalsYear.setScrotalCircumference(scrotal_circumference)
			                                            MyAnimalsYear.setSheathScore(sheath_score)
			                                            MyAnimalsYear.setNavelScore(navel_score)
			                                            MyAnimalsYear.setTemperScore(temper_score)
			                                            MyAnimalsYear.setManagementCode(management_code)
			                                            MyAnimalsYear.setContemporaryGroup(contemporary_group)
			                                            MyAnimalsYear.setFrameScore(frame_score)
			                                            MyAnimalsYear.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("animal_year", withFields: ["registration", "year_date", "weight"], withHeaders: ["registrati", "year_date", "weight"], withSizes: [25, 45, 45], withDataType: "AnimalsYear");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // MemberContact
			                        if let contact = base_json["contact"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "contact" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                MemberContact.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if contact.count > 0 {
			                                for (var i = 0; i < contact.count; i += 1 ) {
                                    
			                                    if let get_contact = contact[i] as? NSDictionary {
                                        
			                                        //let contact_id = get_contact["contact_id"] as? Int
			                                        let member_id = get_contact["member_id"] as? String
			                                        let nickname = get_contact["nickname"] as? String
			                                        let address_line_1 = get_contact["address_line_1"] as? String
			                                        let address_line_2 = get_contact["address_line_2"] as? String
			                                        let city = get_contact["city"] as? String
			                                        let state = get_contact["state"] as? String
			                                        let zip_code = get_contact["zip_code"] as? String
			                                        let country = get_contact["country"] as? String
			                                        let email = get_contact["email"] as? String
			                                        let phone_number = get_contact["phone_number"] as? String
			                                        let is_primary = get_contact["is_primary"] as? Int
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyMemberContact = MemberContactData()
                                            
			                                            //MyMemberContact.setContactId(contact_id)
			                                            MyMemberContact.setMemberId(member_id)
			                                            MyMemberContact.setNickname(nickname)
			                                            MyMemberContact.setAddressLine1(address_line_1)
			                                            MyMemberContact.setAddressLine2(address_line_2)
			                                            MyMemberContact.setCity(city)
			                                            MyMemberContact.setState(state)
			                                            MyMemberContact.setZipCode(zip_code)
			                                            MyMemberContact.setCountry(country)
			                                            MyMemberContact.setEmail(email)
			                                            MyMemberContact.setPhoneNumber(phone_number)
			                                            MyMemberContact.setIsPrimary(is_primary)
			                                            MyMemberContact.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("contact", withFields: ["_id", "member_id", "nickname"], withHeaders: ["_id", "member_id", "nickname"], withSizes: [25, 45, 45], withDataType: "MemberContact");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // DnaParentage
			                        if let dna_parentage = base_json["dna_parentage"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "dna_parentage" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                DnaParentage.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if dna_parentage.count > 0 {
			                                for (var i = 0; i < dna_parentage.count; i += 1 ) {
                                    
			                                    if let get_dna_parentage = dna_parentage[i] as? NSDictionary {
                                        
			                                        let _id = get_dna_parentage["_id"] as? Int
			                                        let sample_id = get_dna_parentage["sample_id"] as? Int
			                                        let animal_id = get_dna_parentage["animal_id"] as? String
			                                        let barcode = get_dna_parentage["barcode"] as? String
			                                        let registration = get_dna_parentage["registration"] as? String
			                                        let sample_status = get_dna_parentage["sample_status"] as? String
			                                        let sire_1 = get_dna_parentage["sire_1"] as? String
			                                        let sire_2 = get_dna_parentage["sire_2"] as? String
			                                        let dam = get_dna_parentage["dam"] as? String
			                                        let sire_1_result = get_dna_parentage["sire_1_result"] as? String
			                                        let sire_2_result = get_dna_parentage["sire_2_result"] as? String
			                                        let dam_result = get_dna_parentage["dam_result"] as? String
			                                        let sire_1_dam_result = get_dna_parentage["sire_1_dam_result"] as? String
			                                        let sire_2_dam_result = get_dna_parentage["sire_2_dam_result"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyDnaParentage = DnaParentageData()
                                            
			                                            MyDnaParentage.setId(_id)
			                                            MyDnaParentage.setSampleId(sample_id)
			                                            MyDnaParentage.setAnimalId(animal_id)
			                                            MyDnaParentage.setBarcode(barcode)
			                                            MyDnaParentage.setRegistration(registration)
			                                            MyDnaParentage.setSampleStatus(sample_status)
			                                            MyDnaParentage.setSire1(sire_1)
			                                            MyDnaParentage.setSire2(sire_2)
			                                            MyDnaParentage.setDam(dam)
			                                            MyDnaParentage.setSire1Result(sire_1_result)
			                                            MyDnaParentage.setSire2Result(sire_2_result)
			                                            MyDnaParentage.setDamResult(dam_result)
			                                            MyDnaParentage.setSire1DamResult(sire_1_dam_result)
			                                            MyDnaParentage.setSire2DamResult(sire_2_dam_result)
			                                            MyDnaParentage.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("dna_parentage", withFields: ["_id", "sample_id", "animal_id"], withHeaders: ["_id", "sample_id", "animal_id"], withSizes: [25, 45, 45], withDataType: "DnaParentage");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // DnaRequests
			                        if let dna_requests = base_json["dna_requests"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "dna_requests" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                DnaRequests.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if dna_requests.count > 0 {
			                                for (var i = 0; i < dna_requests.count; i += 1 ) {
                                    
			                                    if let get_dna_requests = dna_requests[i] as? NSDictionary {
                                        
			                                        //let dna_request_id = get_dna_requests["dna_request_id"] as? Int
			                                        let registration = get_dna_requests["registration"] as? String
			                                        let member_id = get_dna_requests["member_id"] as? String
			                                        let barcode = get_dna_requests["barcode"] as? String
			                                        let sample_type = get_dna_requests["sample_type"] as? String
			                                        let work_order = get_dna_requests["work_order"] as? Int
			                                        let reason = get_dna_requests["reason"] as? String
			                                        let alternate_fathers = get_dna_requests["alternate_fathers"] as? String
			                                        let alternate_mothers = get_dna_requests["alternate_mothers"] as? String
			                                        let in_progress = get_dna_requests["in_progress"] as? Int
			                                        let is_completed = get_dna_requests["is_completed"] as? Int
			                                        let is_redo = get_dna_requests["is_redo"] as? Int
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyDnaRequests = DnaRequestsData()
                                            
			                                            //MyDnaRequests.setDnaRequestId(dna_request_id)
			                                            MyDnaRequests.setRegistration(registration)
			                                            MyDnaRequests.setMemberId(member_id)
			                                            MyDnaRequests.setBarcode(barcode)
			                                            MyDnaRequests.setSampleType(sample_type)
			                                            MyDnaRequests.setWorkOrder(work_order)
			                                            MyDnaRequests.setReason(reason)
			                                            MyDnaRequests.setAlternateFathers(alternate_fathers)
			                                            MyDnaRequests.setAlternateMothers(alternate_mothers)
			                                            MyDnaRequests.setInProgress(in_progress)
			                                            MyDnaRequests.setIsCompleted(is_completed)
			                                            MyDnaRequests.setIsRedo(is_redo)
			                                            MyDnaRequests.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("dna_requests", withFields: ["_id", "registration", "member_id"], withHeaders: ["dna_reques", "registrati", "member_id"], withSizes: [25, 45, 45], withDataType: "DnaRequests");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // DnaSnp
			                        if let dna_snp = base_json["dna_snp"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "dna_snp" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                DnaSnp.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if dna_snp.count > 0 {
			                                for (var i = 0; i < dna_snp.count; i += 1 ) {
                                    
			                                    if let get_dna_snp = dna_snp[i] as? NSDictionary {
                                        
			                                        let _id = get_dna_snp["_id"] as? Int
			                                        let sample_id = get_dna_snp["sample_id"] as? String
			                                        let test = get_dna_snp["test"] as? String
			                                        let date_banked2 = get_dna_snp["date_banked"] as? String
			                                        let date_banked = Utils.convertToDateOpt(date_banked2)
			                                        let barcode = get_dna_snp["barcode"] as? String
			                                        let registration = get_dna_snp["registration"] as? String
			                                        let sample_status = get_dna_snp["sample_status"] as? String
			                                        let snp_dq789028 = get_dna_snp["snp_dq789028"] as? String
			                                        let snp_dq404151 = get_dna_snp["snp_dq404151"] as? String
			                                        let snp_ef042091 = get_dna_snp["snp_ef042091"] as? String
			                                        let snp_ef034081 = get_dna_snp["snp_ef034081"] as? String
			                                        let snp_ay849381 = get_dna_snp["snp_ay849381"] as? String
			                                        let snp_ay937242 = get_dna_snp["snp_ay937242"] as? String
			                                        let snp_dq470475 = get_dna_snp["snp_dq470475"] as? String
			                                        let snp_ay851163 = get_dna_snp["snp_ay851163"] as? String
			                                        let snp_dq995977 = get_dna_snp["snp_dq995977"] as? String
			                                        let snp_dq500958 = get_dna_snp["snp_dq500958"] as? String
			                                        let snp_ay856094 = get_dna_snp["snp_ay856094"] as? String
			                                        let snp_dq650635 = get_dna_snp["snp_dq650635"] as? String
			                                        let snp_dq837646 = get_dna_snp["snp_dq837646"] as? String
			                                        let snp_dq647190 = get_dna_snp["snp_dq647190"] as? String
			                                        let snp_dq888313 = get_dna_snp["snp_dq888313"] as? String
			                                        let snp_dq846690 = get_dna_snp["snp_dq846690"] as? String
			                                        let snp_ay914316 = get_dna_snp["snp_ay914316"] as? String
			                                        let snp_dq888311 = get_dna_snp["snp_dq888311"] as? String
			                                        let snp_ef028073 = get_dna_snp["snp_ef028073"] as? String
			                                        let snp_ay853303 = get_dna_snp["snp_ay853303"] as? String
			                                        let snp_dq866818 = get_dna_snp["snp_dq866818"] as? String
			                                        let snp_dq832700 = get_dna_snp["snp_dq832700"] as? String
			                                        let snp_ay776154 = get_dna_snp["snp_ay776154"] as? String
			                                        let snp_ay850194 = get_dna_snp["snp_ay850194"] as? String
			                                        let snp_dq786759 = get_dna_snp["snp_dq786759"] as? String
			                                        let snp_dq837643 = get_dna_snp["snp_dq837643"] as? String
			                                        let snp_ef034083 = get_dna_snp["snp_ef034083"] as? String
			                                        let snp_dq786764 = get_dna_snp["snp_dq786764"] as? String
			                                        let snp_dq674265 = get_dna_snp["snp_dq674265"] as? String
			                                        let snp_ef150946 = get_dna_snp["snp_ef150946"] as? String
			                                        let snp_dq984828 = get_dna_snp["snp_dq984828"] as? String
			                                        let snp_ay842474 = get_dna_snp["snp_ay842474"] as? String
			                                        let snp_ef034084 = get_dna_snp["snp_ef034084"] as? String
			                                        let snp_ef026086 = get_dna_snp["snp_ef026086"] as? String
			                                        let snp_dq990832 = get_dna_snp["snp_dq990832"] as? String
			                                        let snp_ay919868 = get_dna_snp["snp_ay919868"] as? String
			                                        let snp_dq422950 = get_dna_snp["snp_dq422950"] as? String
			                                        let snp_ay942198 = get_dna_snp["snp_ay942198"] as? String
			                                        let snp_ay939849 = get_dna_snp["snp_ay939849"] as? String
			                                        let snp_dq404152 = get_dna_snp["snp_dq404152"] as? String
			                                        let snp_ef093512 = get_dna_snp["snp_ef093512"] as? String
			                                        let snp_ef026084 = get_dna_snp["snp_ef026084"] as? String
			                                        let snp_ay857620 = get_dna_snp["snp_ay857620"] as? String
			                                        let snp_dq839235 = get_dna_snp["snp_dq839235"] as? String
			                                        let snp_dq647186 = get_dna_snp["snp_dq647186"] as? String
			                                        let snp_dq404149 = get_dna_snp["snp_dq404149"] as? String
			                                        let snp_ay916666 = get_dna_snp["snp_ay916666"] as? String
			                                        let snp_dq888310 = get_dna_snp["snp_dq888310"] as? String
			                                        let snp_dq888312 = get_dna_snp["snp_dq888312"] as? String
			                                        let snp_ef164803 = get_dna_snp["snp_ef164803"] as? String
			                                        let snp_dq451555 = get_dna_snp["snp_dq451555"] as? String
			                                        let snp_dq422949 = get_dna_snp["snp_dq422949"] as? String
			                                        let snp_dq650636 = get_dna_snp["snp_dq650636"] as? String
			                                        let snp_ay853302 = get_dna_snp["snp_ay853302"] as? String
			                                        let snp_ay841151 = get_dna_snp["snp_ay841151"] as? String
			                                        let snp_ef026087 = get_dna_snp["snp_ef026087"] as? String
			                                        let snp_ay761135 = get_dna_snp["snp_ay761135"] as? String
			                                        let snp_dq990834 = get_dna_snp["snp_dq990834"] as? String
			                                        let snp_dq485413 = get_dna_snp["snp_dq485413"] as? String
			                                        let snp_ay851162 = get_dna_snp["snp_ay851162"] as? String
			                                        let snp_ef034086 = get_dna_snp["snp_ef034086"] as? String
			                                        let snp_dq837645 = get_dna_snp["snp_dq837645"] as? String
			                                        let snp_ef141102 = get_dna_snp["snp_ef141102"] as? String
			                                        let snp_dq786760 = get_dna_snp["snp_dq786760"] as? String
			                                        let snp_ay842473 = get_dna_snp["snp_ay842473"] as? String
			                                        let snp_dq916059 = get_dna_snp["snp_dq916059"] as? String
			                                        let snp_ay863214 = get_dna_snp["snp_ay863214"] as? String
			                                        let snp_dq984827 = get_dna_snp["snp_dq984827"] as? String
			                                        let snp_dq489377 = get_dna_snp["snp_dq489377"] as? String
			                                        let snp_dq984825 = get_dna_snp["snp_dq984825"] as? String
			                                        let snp_dq984826 = get_dna_snp["snp_dq984826"] as? String
			                                        let snp_ef093511 = get_dna_snp["snp_ef093511"] as? String
			                                        let snp_dq435443 = get_dna_snp["snp_dq435443"] as? String
			                                        let snp_dq990833 = get_dna_snp["snp_dq990833"] as? String
			                                        let snp_dq786757 = get_dna_snp["snp_dq786757"] as? String
			                                        let snp_ay929334 = get_dna_snp["snp_ay929334"] as? String
			                                        let snp_ay941204 = get_dna_snp["snp_ay941204"] as? String
			                                        let snp_dq786762 = get_dna_snp["snp_dq786762"] as? String
			                                        let snp_ay858890 = get_dna_snp["snp_ay858890"] as? String
			                                        let snp_dq837644 = get_dna_snp["snp_dq837644"] as? String
			                                        let snp_dq786758 = get_dna_snp["snp_dq786758"] as? String
			                                        let snp_dq995976 = get_dna_snp["snp_dq995976"] as? String
			                                        let snp_ef026085 = get_dna_snp["snp_ef026085"] as? String
			                                        let snp_dq846694 = get_dna_snp["snp_dq846694"] as? String
			                                        let snp_ay849380 = get_dna_snp["snp_ay849380"] as? String
			                                        let snp_dq404150 = get_dna_snp["snp_dq404150"] as? String
			                                        let snp_dq647189 = get_dna_snp["snp_dq647189"] as? String
			                                        let snp_dq468384 = get_dna_snp["snp_dq468384"] as? String
			                                        let snp_dq404153 = get_dna_snp["snp_dq404153"] as? String
			                                        let snp_ay943841 = get_dna_snp["snp_ay943841"] as? String
			                                        let snp_dq916057 = get_dna_snp["snp_dq916057"] as? String
			                                        let snp_dq647188 = get_dna_snp["snp_dq647188"] as? String
			                                        let snp_ef093510 = get_dna_snp["snp_ef093510"] as? String
			                                        let snp_dq786761 = get_dna_snp["snp_dq786761"] as? String
			                                        let snp_dq846695 = get_dna_snp["snp_dq846695"] as? String
			                                        let snp_ay860426 = get_dna_snp["snp_ay860426"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyDnaSnp = DnaSnpData()
                                            
			                                            MyDnaSnp.setId(_id)
			                                            MyDnaSnp.setSampleId(sample_id)
			                                            MyDnaSnp.setTest(test)
			                                            MyDnaSnp.setDateBanked(date_banked)
			                                            MyDnaSnp.setBarcode(barcode)
			                                            MyDnaSnp.setRegistration(registration)
			                                            MyDnaSnp.setSampleStatus(sample_status)
			                                            MyDnaSnp.setSnpDq789028(snp_dq789028)
			                                            MyDnaSnp.setSnpDq404151(snp_dq404151)
			                                            MyDnaSnp.setSnpEf042091(snp_ef042091)
			                                            MyDnaSnp.setSnpEf034081(snp_ef034081)
			                                            MyDnaSnp.setSnpAy849381(snp_ay849381)
			                                            MyDnaSnp.setSnpAy937242(snp_ay937242)
			                                            MyDnaSnp.setSnpDq470475(snp_dq470475)
			                                            MyDnaSnp.setSnpAy851163(snp_ay851163)
			                                            MyDnaSnp.setSnpDq995977(snp_dq995977)
			                                            MyDnaSnp.setSnpDq500958(snp_dq500958)
			                                            MyDnaSnp.setSnpAy856094(snp_ay856094)
			                                            MyDnaSnp.setSnpDq650635(snp_dq650635)
			                                            MyDnaSnp.setSnpDq837646(snp_dq837646)
			                                            MyDnaSnp.setSnpDq647190(snp_dq647190)
			                                            MyDnaSnp.setSnpDq888313(snp_dq888313)
			                                            MyDnaSnp.setSnpDq846690(snp_dq846690)
			                                            MyDnaSnp.setSnpAy914316(snp_ay914316)
			                                            MyDnaSnp.setSnpDq888311(snp_dq888311)
			                                            MyDnaSnp.setSnpEf028073(snp_ef028073)
			                                            MyDnaSnp.setSnpAy853303(snp_ay853303)
			                                            MyDnaSnp.setSnpDq866818(snp_dq866818)
			                                            MyDnaSnp.setSnpDq832700(snp_dq832700)
			                                            MyDnaSnp.setSnpAy776154(snp_ay776154)
			                                            MyDnaSnp.setSnpAy850194(snp_ay850194)
			                                            MyDnaSnp.setSnpDq786759(snp_dq786759)
			                                            MyDnaSnp.setSnpDq837643(snp_dq837643)
			                                            MyDnaSnp.setSnpEf034083(snp_ef034083)
			                                            MyDnaSnp.setSnpDq786764(snp_dq786764)
			                                            MyDnaSnp.setSnpDq674265(snp_dq674265)
			                                            MyDnaSnp.setSnpEf150946(snp_ef150946)
			                                            MyDnaSnp.setSnpDq984828(snp_dq984828)
			                                            MyDnaSnp.setSnpAy842474(snp_ay842474)
			                                            MyDnaSnp.setSnpEf034084(snp_ef034084)
			                                            MyDnaSnp.setSnpEf026086(snp_ef026086)
			                                            MyDnaSnp.setSnpDq990832(snp_dq990832)
			                                            MyDnaSnp.setSnpAy919868(snp_ay919868)
			                                            MyDnaSnp.setSnpDq422950(snp_dq422950)
			                                            MyDnaSnp.setSnpAy942198(snp_ay942198)
			                                            MyDnaSnp.setSnpAy939849(snp_ay939849)
			                                            MyDnaSnp.setSnpDq404152(snp_dq404152)
			                                            MyDnaSnp.setSnpEf093512(snp_ef093512)
			                                            MyDnaSnp.setSnpEf026084(snp_ef026084)
			                                            MyDnaSnp.setSnpAy857620(snp_ay857620)
			                                            MyDnaSnp.setSnpDq839235(snp_dq839235)
			                                            MyDnaSnp.setSnpDq647186(snp_dq647186)
			                                            MyDnaSnp.setSnpDq404149(snp_dq404149)
			                                            MyDnaSnp.setSnpAy916666(snp_ay916666)
			                                            MyDnaSnp.setSnpDq888310(snp_dq888310)
			                                            MyDnaSnp.setSnpDq888312(snp_dq888312)
			                                            MyDnaSnp.setSnpEf164803(snp_ef164803)
			                                            MyDnaSnp.setSnpDq451555(snp_dq451555)
			                                            MyDnaSnp.setSnpDq422949(snp_dq422949)
			                                            MyDnaSnp.setSnpDq650636(snp_dq650636)
			                                            MyDnaSnp.setSnpAy853302(snp_ay853302)
			                                            MyDnaSnp.setSnpAy841151(snp_ay841151)
			                                            MyDnaSnp.setSnpEf026087(snp_ef026087)
			                                            MyDnaSnp.setSnpAy761135(snp_ay761135)
			                                            MyDnaSnp.setSnpDq990834(snp_dq990834)
			                                            MyDnaSnp.setSnpDq485413(snp_dq485413)
			                                            MyDnaSnp.setSnpAy851162(snp_ay851162)
			                                            MyDnaSnp.setSnpEf034086(snp_ef034086)
			                                            MyDnaSnp.setSnpDq837645(snp_dq837645)
			                                            MyDnaSnp.setSnpEf141102(snp_ef141102)
			                                            MyDnaSnp.setSnpDq786760(snp_dq786760)
			                                            MyDnaSnp.setSnpAy842473(snp_ay842473)
			                                            MyDnaSnp.setSnpDq916059(snp_dq916059)
			                                            MyDnaSnp.setSnpAy863214(snp_ay863214)
			                                            MyDnaSnp.setSnpDq984827(snp_dq984827)
			                                            MyDnaSnp.setSnpDq489377(snp_dq489377)
			                                            MyDnaSnp.setSnpDq984825(snp_dq984825)
			                                            MyDnaSnp.setSnpDq984826(snp_dq984826)
			                                            MyDnaSnp.setSnpEf093511(snp_ef093511)
			                                            MyDnaSnp.setSnpDq435443(snp_dq435443)
			                                            MyDnaSnp.setSnpDq990833(snp_dq990833)
			                                            MyDnaSnp.setSnpDq786757(snp_dq786757)
			                                            MyDnaSnp.setSnpAy929334(snp_ay929334)
			                                            MyDnaSnp.setSnpAy941204(snp_ay941204)
			                                            MyDnaSnp.setSnpDq786762(snp_dq786762)
			                                            MyDnaSnp.setSnpAy858890(snp_ay858890)
			                                            MyDnaSnp.setSnpDq837644(snp_dq837644)
			                                            MyDnaSnp.setSnpDq786758(snp_dq786758)
			                                            MyDnaSnp.setSnpDq995976(snp_dq995976)
			                                            MyDnaSnp.setSnpEf026085(snp_ef026085)
			                                            MyDnaSnp.setSnpDq846694(snp_dq846694)
			                                            MyDnaSnp.setSnpAy849380(snp_ay849380)
			                                            MyDnaSnp.setSnpDq404150(snp_dq404150)
			                                            MyDnaSnp.setSnpDq647189(snp_dq647189)
			                                            MyDnaSnp.setSnpDq468384(snp_dq468384)
			                                            MyDnaSnp.setSnpDq404153(snp_dq404153)
			                                            MyDnaSnp.setSnpAy943841(snp_ay943841)
			                                            MyDnaSnp.setSnpDq916057(snp_dq916057)
			                                            MyDnaSnp.setSnpDq647188(snp_dq647188)
			                                            MyDnaSnp.setSnpEf093510(snp_ef093510)
			                                            MyDnaSnp.setSnpDq786761(snp_dq786761)
			                                            MyDnaSnp.setSnpDq846695(snp_dq846695)
			                                            MyDnaSnp.setSnpAy860426(snp_ay860426)
			                                            MyDnaSnp.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("dna_snp", withFields: ["_id", "sample_id", "test"], withHeaders: ["_id", "sample_id", "test"], withSizes: [25, 45, 45], withDataType: "DnaSnp");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // DnaTests
			                        if let dna_tests = base_json["dna_tests"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "dna_tests" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                DnaTests.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if dna_tests.count > 0 {
			                                for (var i = 0; i < dna_tests.count; i += 1 ) {
                                    
			                                    if let get_dna_tests = dna_tests[i] as? NSDictionary {
                                        
			                                        //let dna_id = get_dna_tests["dna_id"] as? Int
			                                        let registration = get_dna_tests["registration"] as? String
			                                        let member_id = get_dna_tests["member_id"] as? String
			                                        let breed = get_dna_tests["breed"] as? String
			                                        let date_banked2 = get_dna_tests["date_banked"] as? String
			                                        let date_banked = Utils.convertToDateOpt(date_banked2)
			                                        let blood_bank = get_dna_tests["blood_bank"] as? String
			                                        let hal_1843_stress = get_dna_tests["hal_1843_stress"] as? String
			                                        let hamp_color_gene = get_dna_tests["hamp_color_gene"] as? String
			                                        let dna_breed_profile = get_dna_tests["dna_breed_profile"] as? String
			                                        let rn_gene_napole = get_dna_tests["rn_gene_napole"] as? String
			                                        let total_gain = get_dna_tests["total_gain"] as? String
			                                        let litter_size = get_dna_tests["litter_size"] as? String
			                                        let animal_growth = get_dna_tests["animal_growth"] as? String
			                                        let meat_quality = get_dna_tests["meat_quality"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyDnaTests = DnaTestsData()
                                            
			                                            //MyDnaTests.setDnaId(dna_id)
			                                            MyDnaTests.setRegistration(registration)
			                                            MyDnaTests.setMemberId(member_id)
			                                            MyDnaTests.setBreed(breed)
			                                            MyDnaTests.setDateBanked(date_banked)
			                                            MyDnaTests.setBloodBank(blood_bank)
			                                            MyDnaTests.setHal1843Stress(hal_1843_stress)
			                                            MyDnaTests.setHampColorGene(hamp_color_gene)
			                                            MyDnaTests.setDnaBreedProfile(dna_breed_profile)
			                                            MyDnaTests.setRnGeneNapole(rn_gene_napole)
			                                            MyDnaTests.setTotalGain(total_gain)
			                                            MyDnaTests.setLitterSize(litter_size)
			                                            MyDnaTests.setAnimalGrowth(animal_growth)
			                                            MyDnaTests.setMeatQuality(meat_quality)
			                                            MyDnaTests.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("dna_tests", withFields: ["_id", "registration", "member_id"], withHeaders: ["dna_id", "registrati", "member_id"], withSizes: [25, 45, 45], withDataType: "DnaTests");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // InventoryEmbryo
			                        if let embryo_inventory = base_json["embryo_inventory"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "embryo_inventory" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                InventoryEmbryo.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if embryo_inventory.count > 0 {
			                                for (var i = 0; i < embryo_inventory.count; i += 1 ) {
                                    
			                                    if let get_embryo_inventory = embryo_inventory[i] as? NSDictionary {
                                        
			                                        let embryo_id = get_embryo_inventory["embryo_id"] as? Int
			                                        let member_id = get_embryo_inventory["member_id"] as? String
			                                        let registration = get_embryo_inventory["registration"] as? String
			                                        let tank = get_embryo_inventory["tank"] as? String
			                                        let canister = get_embryo_inventory["canister"] as? String
			                                        let cane = get_embryo_inventory["cane"] as? String
			                                        let straw_qty = get_embryo_inventory["straw_qty"] as? Int
			                                        let flush_date2 = get_embryo_inventory["flush_date"] as? String
			                                        let flush_date = Utils.convertToDateOpt(flush_date2)
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyInventoryEmbryo = InventoryEmbryoData()
                                            
			                                            MyInventoryEmbryo.setEmbryoId(embryo_id)
			                                            MyInventoryEmbryo.setMemberId(member_id)
			                                            MyInventoryEmbryo.setRegistration(registration)
			                                            MyInventoryEmbryo.setTank(tank)
			                                            MyInventoryEmbryo.setCanister(canister)
			                                            MyInventoryEmbryo.setCane(cane)
			                                            MyInventoryEmbryo.setStrawQty(straw_qty)
			                                            MyInventoryEmbryo.setFlushDate(flush_date)
			                                            MyInventoryEmbryo.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("embryo_inventory", withFields: ["_id", "member_id", "registration"], withHeaders: ["_id", "member_id", "registrati"], withSizes: [25, 45, 45], withDataType: "InventoryEmbryo");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // InventoryHealth
			                        if let health_manager = base_json["health_manager"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "health_manager" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                InventoryHealth.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if health_manager.count > 0 {
			                                for (var i = 0; i < health_manager.count; i += 1 ) {
                                    
			                                    if let get_health_manager = health_manager[i] as? NSDictionary {
                                        
			                                        let _id = get_health_manager["_id"] as? Int
			                                        let health_id = get_health_manager["health_id"] as? Int
			                                        let member_id = get_health_manager["member_id"] as? String
			                                        let product_name = get_health_manager["product_name"] as? String
			                                        let withdrawal_period = get_health_manager["withdrawal_period"] as? String
			                                        let lot_number = get_health_manager["lot_number"] as? String
			                                        let serial_number = get_health_manager["serial_number"] as? String
			                                        let expiration_date2 = get_health_manager["expiration_date"] as? String
			                                        let expiration_date = Utils.convertToDateOpt(expiration_date2)
			                                        let dosage = get_health_manager["dosage"] as? String
			                                        let method = get_health_manager["method"] as? String
			                                        let location = get_health_manager["location"] as? String
			                                        let administered_by = get_health_manager["administered_by"] as? String
			                                        let less_than_ten_months = get_health_manager["less_than_ten_months"] as? Int
			                                        let greater_than_ten_months = get_health_manager["greater_than_ten_months"] as? Int
			                                        let less_than_twelve_months = get_health_manager["less_than_twelve_months"] as? Int
			                                        let female_only = get_health_manager["female_only"] as? Int
			                                        let male_only = get_health_manager["male_only"] as? Int
			                                        let is_bangs = get_health_manager["is_bangs"] as? Int
			                                        let no_requirement = get_health_manager["no_requirement"] as? Int
			                                        let is_active = get_health_manager["is_active"] as? Int
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyInventoryHealth = InventoryHealthData()
                                            
			                                            MyInventoryHealth.setId(_id)
			                                            MyInventoryHealth.setHealthId(health_id)
			                                            MyInventoryHealth.setMemberId(member_id)
			                                            MyInventoryHealth.setProductName(product_name)
			                                            MyInventoryHealth.setWithdrawalPeriod(withdrawal_period)
			                                            MyInventoryHealth.setLotNumber(lot_number)
			                                            MyInventoryHealth.setSerialNumber(serial_number)
			                                            MyInventoryHealth.setExpirationDate(expiration_date)
			                                            MyInventoryHealth.setDosage(dosage)
			                                            MyInventoryHealth.setMethod(method)
			                                            MyInventoryHealth.setLocation(location)
			                                            MyInventoryHealth.setAdministeredBy(administered_by)
			                                            MyInventoryHealth.setLessThanTenMonths(less_than_ten_months)
			                                            MyInventoryHealth.setGreaterThanTenMonths(greater_than_ten_months)
			                                            MyInventoryHealth.setLessThanTwelveMonths(less_than_twelve_months)
			                                            MyInventoryHealth.setFemaleOnly(female_only)
			                                            MyInventoryHealth.setMaleOnly(male_only)
			                                            MyInventoryHealth.setIsBangs(is_bangs)
			                                            MyInventoryHealth.setNoRequirement(no_requirement)
			                                            MyInventoryHealth.setIsActive(is_active)
			                                            MyInventoryHealth.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("health_manager", withFields: ["_id", "health_id", "member_id"], withHeaders: ["_id", "health_id", "member_id"], withSizes: [25, 45, 45], withDataType: "InventoryHealth");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // Litter
			                        if let litter = base_json["litter"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "litter" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                Litter.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if litter.count > 0 {
			                                for (var i = 0; i < litter.count; i += 1 ) {
                                    
			                                    if let get_litter = litter[i] as? NSDictionary {
                                        
			                                        //let litter_id = get_litter["litter_id"] as? Int
			                                        let member_id = get_litter["member_id"] as? String
			                                        let birth_date2 = get_litter["birth_date"] as? String
			                                        let birth_date = Utils.convertToDateOpt(birth_date2)
			                                        let litter_group = get_litter["litter_group"] as? String
			                                        let mother = get_litter["mother"] as? String
			                                        let father = get_litter["father"] as? String
			                                        let registration = get_litter["registration"] as? String
			                                        let total_born = get_litter["total_born"] as? Int
			                                        let born_alive = get_litter["born_alive"] as? Int
			                                        let litter_number = get_litter["litter_number"] as? String
			                                        let number_weaned = get_litter["number_weaned"] as? Int
			                                        let date_received2 = get_litter["date_received"] as? String
			                                        let date_received = Utils.convertToDateOpt(date_received2)
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyLitter = LitterData()
                                            
			                                            //MyLitter.setLitterId(litter_id)
			                                            MyLitter.setMemberId(member_id)
			                                            MyLitter.setBirthDate(birth_date)
			                                            MyLitter.setLitterGroup(litter_group)
			                                            MyLitter.setMother(mother)
			                                            MyLitter.setFather(father)
			                                            MyLitter.setRegistration(registration)
			                                            MyLitter.setTotalBorn(total_born)
			                                            MyLitter.setBornAlive(born_alive)
			                                            MyLitter.setLitterNumber(litter_number)
			                                            MyLitter.setNumberWeaned(number_weaned)
			                                            MyLitter.setDateReceived(date_received)
			                                            MyLitter.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("litter", withFields: ["_id", "member_id", "birth_date"], withHeaders: ["litter_id", "member_id", "birth_date"], withSizes: [25, 45, 45], withDataType: "Litter");
                            
			                        }
                        
			                        ///////////////////////////////////////////
			                        // MemberBreedAssociations
			                        if let member_breed_associations = base_json["member_breed_associations"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "member_breed_associations"
                                    {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                MemberBreedAssociations.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if member_breed_associations.count > 0 {
			                                for (var i = 0; i < member_breed_associations.count; i += 1 ) {
                                    
			                                    if let get_member_breed_associations = member_breed_associations[i] as? NSDictionary {
                                        
			                                        let _id = get_member_breed_associations["_id"] as? Int
			                                        let member_id = get_member_breed_associations["member_id"] as? String
			                                        //let brangus = get_member_breed_associations["brangus"] as? Int
			                                        //let akaushi = get_member_breed_associations["akaushi"] as? Int
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyMemberBreedAssociations = MemberBreedAssociationsData()
                                            
			                                            MyMemberBreedAssociations.setId(_id)
			                                            MyMemberBreedAssociations.setMemberId(member_id)
			                                            //MyMemberBreedAssociations.setBrangus(brangus)
			                                            //MyMemberBreedAssociations.setAkaushi(akaushi)
			                                            MyMemberBreedAssociations.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("member_breed_associations", withFields: ["_id", "member_id"], withHeaders: ["_id", "member_id"], withSizes: [25, 45, 45], withDataType: "MemberBreedAssociations");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // Multisire
			                        if let multisire = base_json["multisire"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "multisire" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                Multisire.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if multisire.count > 0 {
			                                for (var i = 0; i < multisire.count; i += 1 ) {
                                    
			                                    if let get_multisire = multisire[i] as? NSDictionary {
                                        
			                                        let multisire_id = get_multisire["multisire_id"] as? String
			                                        let member_id = get_multisire["member_id"] as? String
			                                        let move_in2 = get_multisire["move_in"] as? String
			                                        let move_in = Utils.convertToDateOpt(move_in2)
			                                        let move_out2 = get_multisire["move_out"] as? String
			                                        let move_out = Utils.convertToDateOpt(move_out2)
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyMultisire = MultisireData()
                                            
			                                            MyMultisire.setMultisireId(multisire_id)
			                                            MyMultisire.setMemberId(member_id)
			                                            MyMultisire.setMoveIn(move_in)
			                                            MyMultisire.setMoveOut(move_out)
			                                            MyMultisire.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("multisire", withFields: ["multisire_id", "member_id", "move_in"], withHeaders: ["multisire_", "member_id", "move_in"], withSizes: [25, 45, 45], withDataType: "Multisire");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // MultisireBulls
			                        if let multisire_bulls = base_json["multisire_bulls"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "multisire_bulls" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                MultisireBulls.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if multisire_bulls.count > 0 {
			                                for (var i = 0; i < multisire_bulls.count; i += 1 ) {
                                    
			                                    if let get_multisire_bulls = multisire_bulls[i] as? NSDictionary {
                                        
			                                        //let multisire_bull_id = get_multisire_bulls["multisire_bull_id"] as? Int
			                                        let multisire_id = get_multisire_bulls["multisire_id"] as? String
			                                        let registration = get_multisire_bulls["registration"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyMultisireBulls = MultisireBullsData()
                                            
			                                            //MyMultisireBulls.setMultisireBullId(multisire_bull_id)
			                                            MyMultisireBulls.setMultisireId(multisire_id)
			                                            MyMultisireBulls.setRegistration(registration)
			                                            MyMultisireBulls.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("multisire_bulls", withFields: ["_id", "multisire_id", "registration"], withHeaders: ["multisire_", "multisire_", "registrati"], withSizes: [25, 45, 45], withDataType: "MultisireBulls");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // Ownership
			                        if let ownership = base_json["ownership"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "ownership" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                Ownership.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if ownership.count > 0 {
			                                for (var i = 0; i < ownership.count; i += 1 ) {
                                    
			                                    if let get_ownership = ownership[i] as? NSDictionary {
                                        
			                                        //let ownership_id = get_ownership["ownership_id"] as? Int
			                                        let registration = get_ownership["registration"] as? String
			                                        let member_id = get_ownership["member_id"] as? String
			                                        let amount = get_ownership["amount"] as? Int
			                                        let date_owned2 = get_ownership["date_owned"] as? String
			                                        let date_owned = Utils.convertToDateOpt(date_owned2)
			                                        let superceded = get_ownership["superceded"] as? Int
			                                        let previous_owner = get_ownership["previous_owner"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyOwnership = OwnershipData()
                                            
			                                            //MyOwnership.setOwnershipId(ownership_id)
			                                            MyOwnership.setRegistration(registration)
			                                            MyOwnership.setMemberId(member_id)
			                                            MyOwnership.setAmount(amount)
			                                            MyOwnership.setDateOwned(date_owned)
			                                            MyOwnership.setSuperceded(superceded)
			                                            MyOwnership.setPreviousOwner(previous_owner)
			                                            MyOwnership.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("ownership", withFields: ["_id", "registration", "member_id"], withHeaders: ["ownership_", "registrati", "member_id"], withSizes: [25, 45, 45], withDataType: "Ownership");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // Partnership
			                        if let partnership = base_json["partnership"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "partnership" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                Partnership.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if partnership.count > 0 {
			                                for (var i = 0; i < partnership.count; i += 1 ) {
                                    
			                                    if let get_partnership = partnership[i] as? NSDictionary {
                                        
			                                        let partnership_id = get_partnership["partnership_id"] as? Int
			                                        let registration = get_partnership["registration"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyPartnership = PartnershipData()
                                            
			                                            MyPartnership.setPartnershipId(partnership_id)
			                                            MyPartnership.setRegistration(registration)
			                                            MyPartnership.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("partnership", withFields: ["partnership_id", "registration"], withHeaders: ["partnershi", "registrati"], withSizes: [25, 45, 45], withDataType: "Partnership");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // PartnershipMembers
			                        if let partnership_members = base_json["partnership_members"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "partnership_members" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                PartnershipMembers.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if partnership_members.count > 0 {
			                                for (var i = 0; i < partnership_members.count; i += 1 ) {
                                    
			                                    if let get_partnership_members = partnership_members[i] as? NSDictionary {
                                        
			                                        //let partnership_member_id = get_partnership_members["partnership_member_id"] as? Int
			                                        let partnership_id = get_partnership_members["partnership_id"] as? Int
			                                        let member_id = get_partnership_members["member_id"] as? String
			                                        let begin_date2 = get_partnership_members["begin_date"] as? String
			                                        let begin_date = Utils.convertToDateOpt(begin_date2)
			                                        let end_date2 = get_partnership_members["end_date"] as? String
			                                        let end_date = Utils.convertToDateOpt(end_date2)
			                                        let is_primary = get_partnership_members["is_primary"] as? Int
			                                        let is_accepted = get_partnership_members["is_accepted"] as? Int
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyPartnershipMembers = PartnershipMembersData()
                                            
			                                            //MyPartnershipMembers.setPartnershipMemberId(partnership_member_id)
			                                            MyPartnershipMembers.setPartnershipId(partnership_id)
			                                            MyPartnershipMembers.setMemberId(member_id)
			                                            MyPartnershipMembers.setBeginDate(begin_date)
			                                            MyPartnershipMembers.setEndDate(end_date)
			                                            MyPartnershipMembers.setIsPrimary(is_primary)
			                                            MyPartnershipMembers.setIsAccepted(is_accepted)
			                                            MyPartnershipMembers.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("partnership_members", withFields: ["_id", "partnership_id", "member_id"], withHeaders: ["partnershi", "partnershi", "member_id"], withSizes: [25, 45, 45], withDataType: "PartnershipMembers");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // LocationPasture
			                        if let pasture = base_json["pasture"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "pasture" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                LocationPasture.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if pasture.count > 0 {
			                                for (var i = 0; i < pasture.count; i += 1 ) {
                                    
			                                    if let get_pasture = pasture[i] as? NSDictionary {
                                        
			                                        let _id = get_pasture["_id"] as? Int
			                                        let pasture_id = get_pasture["pasture_id"] as? Int
			                                        let pasture_name = get_pasture["pasture_name"] as? String
			                                        let pasture_description = get_pasture["pasture_description"] as? String
			                                        let member_id = get_pasture["member_id"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyLocationPasture = LocationPastureData()
                                            
			                                            MyLocationPasture.setId(_id)
			                                            MyLocationPasture.setPastureId(pasture_id)
			                                            MyLocationPasture.setPastureName(pasture_name)
			                                            MyLocationPasture.setPastureDescription(pasture_description)
			                                            MyLocationPasture.setMemberId(member_id)
			                                            MyLocationPasture.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("pasture", withFields: ["_id", "pasture_id", "pasture_name"], withHeaders: ["_id", "pasture_id", "pasture_na"], withSizes: [25, 45, 45], withDataType: "LocationPasture");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // LocationPen
			                        if let pen = base_json["pen"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "pen" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                LocationPen.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if pen.count > 0 {
			                                for (var i = 0; i < pen.count; i += 1 ) {
                                    
			                                    if let get_pen = pen[i] as? NSDictionary {
                                        
			                                        let _id = get_pen["_id"] as? Int
			                                        let pen_id = get_pen["pen_id"] as? Int
			                                        let pen_name = get_pen["pen_name"] as? String
			                                        let pen_description = get_pen["pen_description"] as? String
			                                        let member_id = get_pen["member_id"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyLocationPen = LocationPenData()
                                            
			                                            MyLocationPen.setId(_id)
			                                            MyLocationPen.setPenId(pen_id)
			                                            MyLocationPen.setPenName(pen_name)
			                                            MyLocationPen.setPenDescription(pen_description)
			                                            MyLocationPen.setMemberId(member_id)
			                                            MyLocationPen.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("pen", withFields: ["_id", "pen_id", "pen_name"], withHeaders: ["_id", "pen_id", "pen_name"], withSizes: [25, 45, 45], withDataType: "LocationPen");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // InventorySemen
			                        if let semen_inventory = base_json["semen_inventory"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "semen_inventory" {
                            
		                                print("has semen")
                                
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                InventorySemen.truncate()
			                            }
                            
			                            let dbn = Database()
                                
		                                print("semen_count:", semen_inventory.count)
			                            if semen_inventory.count > 0 {
			                                for (var i = 0; i < semen_inventory.count; i += 1 ) {
                                    
			                                    if let get_semen_inventory = semen_inventory[i] as? NSDictionary {
                                        
			                                        let semen_id = get_semen_inventory["semen_id"] as? Int
			                                        let member_id = get_semen_inventory["member_id"] as? String
			                                        let registration = get_semen_inventory["registration"] as? String
			                                        let tank = get_semen_inventory["tank"] as? String
			                                        let canister = get_semen_inventory["canister"] as? String
			                                        let cane = get_semen_inventory["cane"] as? String
			                                        let straw_qty = get_semen_inventory["straw_qty"] as? Int
			                                        let date_collected2 = get_semen_inventory["date_collected"] as? String
			                                        let date_collected = Utils.convertToDateOpt(date_collected2)
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyInventorySemen = InventorySemenData()
                                            
			                                            MyInventorySemen.setSemenId(semen_id)
			                                            MyInventorySemen.setMemberId(member_id)
			                                            MyInventorySemen.setRegistration(registration)
			                                            MyInventorySemen.setTank(tank)
			                                            MyInventorySemen.setCanister(canister)
			                                            MyInventorySemen.setCane(cane)
			                                            MyInventorySemen.setStrawQty(straw_qty)
			                                            MyInventorySemen.setDateCollected(date_collected)
			                                            MyInventorySemen.addNew()
                                                
		                                                Utils.printObject(MyInventorySemen)
                                                
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("semen_inventory", withFields: ["semen_id", "member_id", "registration"], withHeaders: ["semen_id", "member_id", "registrati"], withSizes: [25, 45, 45], withDataType: "InventorySemen");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // Transfer
			                        if let transfer = base_json["transfer"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "transfer" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                Transfer.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if transfer.count > 0 {
			                                for (var i = 0; i < transfer.count; i += 1 ) {
                                    
			                                    if let get_transfer = transfer[i] as? NSDictionary {
                                        
			                                        //let transfer_id = get_transfer["transfer_id"] as? Int
			                                        let member_id = get_transfer["member_id"] as? String
			                                        let work_order = get_transfer["work_order"] as? Int
			                                        let customer_id = get_transfer["customer_id"] as? String
			                                        let transfer_date2 = get_transfer["transfer_date"] as? String
			                                        let transfer_date = Utils.convertToDateOpt(transfer_date2)
			                                        let value = get_transfer["value"] as? Double
			                                        let registration = get_transfer["registration"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyTransfer = TransferData()
                                            
			                                            //MyTransfer.setTransferId(transfer_id)
			                                            MyTransfer.setMemberId(member_id)
			                                            MyTransfer.setWorkOrder(work_order)
			                                            MyTransfer.setCustomerId(customer_id)
			                                            MyTransfer.setTransferDate(transfer_date)
			                                            MyTransfer.setValue(value)
			                                            MyTransfer.setRegistration(registration)
			                                            MyTransfer.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("transfer", withFields: ["_id", "member_id", "work_order"], withHeaders: ["transfer_i", "member_id", "work_order"], withSizes: [25, 45, 45], withDataType: "Transfer");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // WorkOrder
			                        if let work_order = base_json["work_order"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "work_order" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                WorkOrder.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if work_order.count > 0 {
			                                for (var i = 0; i < work_order.count; i += 1 ) {
                                    
			                                    if let get_work_order = work_order[i] as? NSDictionary {
                                        
			                                        let work_order = get_work_order["work_order"] as? Int
			                                        let member_id = get_work_order["member_id"] as? String
			                                        let date_received2 = get_work_order["date_received"] as? String
			                                        let date_received = Utils.convertToDateOpt(date_received2)
			                                        let date_closed2 = get_work_order["date_closed"] as? String
			                                        let date_closed = Utils.convertToDateOpt(date_closed2)
			                                        let description = get_work_order["description"] as? String
			                                        let is_closed = get_work_order["is_closed"] as? Int
			                                        let notes = get_work_order["notes"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyWorkOrder = WorkOrderData()
                                            
			                                            MyWorkOrder.setWorkOrder(work_order)
			                                            MyWorkOrder.setMemberId(member_id)
			                                            MyWorkOrder.setDateReceived(date_received)
			                                            MyWorkOrder.setDateClosed(date_closed)
			                                            MyWorkOrder.setDescription(description)
			                                            MyWorkOrder.setIsClosed(is_closed)
			                                            MyWorkOrder.setNotes(notes)
			                                            MyWorkOrder.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("work_order", withFields: ["work_order", "member_id", "date_received"], withHeaders: ["work_order", "member_id", "date_recei"], withSizes: [25, 45, 45], withDataType: "WorkOrder");
                            
			                        }
                        
                        
                        
			                        ///////////////////////////////////////////
			                        // WorkOrderItem
			                        if let work_order_item = base_json["work_order_item"] as? NSArray where self.db_new_tables_list[self.db_cur_index] == "work_order_item" {
                            
			                            if DBUtils.isNewDB() && self.offset == 0 {
			                                WorkOrderItem.truncate()
			                            }
                            
			                            let dbn = Database()
			                            if work_order_item.count > 0 {
			                                for (var i = 0; i < work_order_item.count; i += 1 ) {
                                    
			                                    if let get_work_order_item = work_order_item[i] as? NSDictionary {
                                        
			                                        //let item_id = get_work_order_item["item_id"] as? Int
			                                        let work_order = get_work_order_item["work_order"] as? Int
			                                        let member_id = get_work_order_item["member_id"] as? String
			                                        let date_entered2 = get_work_order_item["date_entered"] as? String
			                                        let date_entered = Utils.convertToDateOpt(date_entered2)
			                                        let entered_by = get_work_order_item["entered_by"] as? String
			                                        let quantity = get_work_order_item["quantity"] as? Int
			                                        let fee = get_work_order_item["fee"] as? Double
			                                        let description = get_work_order_item["description"] as? String
			                                        if DBUtils.isNewDB() {
                                            
			                                            let MyWorkOrderItem = WorkOrderItemData()
                                            
			                                            //MyWorkOrderItem.setItemId(item_id)
			                                            MyWorkOrderItem.setWorkOrder(work_order)
			                                            MyWorkOrderItem.setMemberId(member_id)
			                                            MyWorkOrderItem.setDateEntered(date_entered)
			                                            MyWorkOrderItem.setEnteredBy(entered_by)
			                                            MyWorkOrderItem.setQuantity(quantity)
			                                            MyWorkOrderItem.setFee(fee)
			                                            MyWorkOrderItem.setDescription(description)
			                                            MyWorkOrderItem.addNew()
                                            
                                            
                                            
			                                        }
			                                    }
			                                }
                                
			                                if (self.db_ins_query.rangeOfString("select") != nil) {
			                                    dbn.query(self.db_ins_query)
			                                }
			                            } else if self.sync_test_mode == true {
                                
                                
			                            }
			                            dbn.showRecords("work_order_item", withFields: ["_id", "work_order", "member_id"], withHeaders: ["item_id", "work_order", "member_id"], withSizes: [25, 45, 45], withDataType: "WorkOrderItem");
                            
			                        }
									
									
									
									
									
								}
								
								dispatch_async(dispatch_get_main_queue()) {
				                    
                                    //print("returned_record_count:", self.returned_record_count)
                                    if self.returned_record_count == 0 && self.db_cur_index < self.db_new_tables_list.count - 1 {
                                                                    
                                        self.offset = 0

